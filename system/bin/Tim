#!/system/xbin/busybox ash
# "THE THING (Tim)"
#Made by _Bon_Bon(@XDA)
#All parts of this MOD and all the code in it
#are protected by GNU GPL, version 3
#Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
#see <http://www.gnu.org/licenses/>
#Delete next comment to enable debuging
#set -x
Tim () {
	mount -o remount,rw /
	mount -o remount,rw rootfs
	mount -o remount,rw /system
	#-- Set_Settings --#
	Set_Ings () {
		#-- Intervals
		for i in `cat /data/The_Thing/System/Interval_settings.txt`; do $i; done
		#-- Preferences
		for i in `cat /data/The_Thing/System/Tim_settings.txt`; do $i; done
	}
	#-- Variables
	Variables () {
		divider="=============================================\n"
		LD_LIBRARY_PATH=/vendor/lib:/system/lib
	}
	#-- Functions --#
	Functions () {
		# Run Fstrim
		Fstrim () {
			if test IgnoreSettings = "true"; then
				The_Thing -f --DATA --SYSTEM --PRELOAD --CACHE
			else
				The_Thing -f
			fi
		}
		# Run Killer
		Killer () {
			The_Thing -k $1
		}
		# Run App Optimizer
		Optimizer () {
			if test IgnoreSettings = "true"; then
				The_Thing -o --DATA --SYSTEM --SQLITE
			else
				The_Thing -o
			fi
		}
		# Run Cleaner
		Cleaner () {
			if test IgnoreSettings = "true"; then
				The_Thing -c --USELESS --LOGS --CAHCE --ADVANCED --DROPBOX
			else
				The_Thing -c
			fi
		}
		#-- Terminate all Wake Locks causer reported by dumpsys when called --#
		Wake_Lock_Blocker () {
			dumpsys power | 
			sed -n '/Wake Locks: size=/,/^$/ p' |
			sed -e 's/.*pid=\([0-9]*\).*/\1/' | 
			while read pid; do
				kill -9 ${pid}
			done
		}
		#-- Update Intervals and time (Takes Cl_Interval, Fs_Interval, Op_Interval or Ki_Interval & NextClean, NextFstrim, NextOptimization or NextKill) --#
		Upd_Interval () {
			for i in `cat /data/The_Thing/System/Interval_settings.txt`; do
				case $i in
					$1=*) $2=$((`echo $i | awk -F= '{print $2}'`+$CURRENT_TIME));;
					*) :;;
				esac
			done
		}
		#-- Locks foreground processes when called
		ProcessLock () {
			for LOCK in `ps | awk '!/]\//&&/./{print $1}'` `cat /data/The_Thing/Userdata/Ram_Lock_data.txt`; do
				if test "`awk '$1<=0' proc/$LOCK/oom_adj`" || "`awk '$1<=0' /proc/$LOCK/oom_score_adj`"; then
					echo -17 > /proc/$LOCK/oom_adj
					echo -1000 > /proc/$LOCK/oom_score_adj
					renice -10 $LOCK
				fi
			done
		}
		#-- LogEngine --#
		Logi () {
			echo "
			$ShouldReboot
			$divider
			Next clean: $NextClean
			Next trim: $NextFstrim
			Next killler run: $NextKill
			Next optimization: $NextOptimization
			Currently active profile: $ProfileActive
			Profile that should be activated: $ProfileUser
			" > /data/The_Thing/Tim.log
			echo "
			$divider
			Other info:
			
			"
		}
		#-- Set charge levels for USB or AC
		Charge_Levels () {
			local j=1
			for i in `cat /sys/kernel/fast_charge/$1_levels`; do
				eval "CHARGE_LEVEL$j=$i"
				j=$(($j+1))
			done
			NUMBER_OF_LEVELS=$j
		}
		#-- Sets profiles depending on call --#
		Set_Profile () {
			local Pro_Dir=/data/The_Thing/Profiles
			case $1 in
				BATTERY) $Pro_Dir/Battery_Profile $2 &;;
				PERFORMANCE) $Pro_Dir/Performance_Profile $2 &;;
				MULTITASKING) $Pro_Dir/Multitasking_Profile $2 &;;
				DEFAULT) $Pro_Dir/Default_Profile &;;
			esac
		}
		#-- Outputs all lines writen into ToastQueue so the user can see them
		OutputToast () {
			if [ -n $1 ]; then
				1="\"$1\""
				eval "am start -a android.intent.action.MAIN -e message $1 -n com.rja.utility/.ShowToast" > dev/null
			else
				for i in `cat /data/The_Thing/System/ToastQueue.txt`; do
					i="\"$i\""
					eval "am start -a android.intent.action.MAIN -e message $i -n com.rja.utility/.ShowToast" > dev/null
				done
				echo "" > /data/The_Thing/System/ToastQueue.txt
			fi
		}
		#-- Get ongoing user processes --#
		GetMulti () {
			local j=0
			for i in `ps -o stat,args | grep "{" | grep -fvF $UserData/Ignored_processes.txt`; do
				if [ -s `echo $i | grep "S"` ]; then
					local j=$(($j+1))
				fi
			done
			return $j
		}
		#-- Update Device States --#
		Upd_State () {
			#-- Get data from dumpsys
			for i in `dumpsys power | tr -d ")'("`
				case $i in
					mBatteryLevel=*) BatteryLevel=`echo $i | awk -F= '{print $2}'`;;
					mBootComplete=*) BootCompleted=`echo $i | awk -F= '{print $2}'`;;
					Wake*size=*) WakeLocksNum=`echo $i | awk -F= '{print $2}'`
					state=*) DisplayState=`echo $i | awk -F= '{print $2}'`;;
					mBatteryLevelLow=*) BatteryLevelLow=`echo $i | awk -F= '{print $2}'`;;
					mDisplayReady=*) DisplayReady=`echo $i | awk -F= '{print $2}'`;;
					mLastUserActivityTime=*) HowLongUseractivity=`echo $i | awk -F= '{print $2}'`; LastUseractivity=`echo $i | awk '{print $2}'`;;
					#mSystemReady=*) SystemReady=`echo $i | awk -F= '{print $2}'`;;
					#mLowPowerModeEnabled=*) LowPowerModeEnabled=`echo $i | awk -F= '{print $2}'`;;
					#mLastWakeTime=*) HowLongAwake=`echo $i | awk -F= '{print $2}'`; LastTimeAwake=`echo $i | awk '{print $3}'`;;
					#mLastSleepTime=*) HowLongAsleep=`echo $i | awk -F= '{print $2}'`; LastTimeAsleep=`echo $i | awk '{print $3}'`;;
					#mHoldingDisplaySuspendBlocker=*) HoldingDisplaySuspendBlocker=`echo $i | awk -F= '{print $2}'`;;
					#mWakeUpWhenPluggedOrUnpluggedConfig=*) WakeOnPlugAndUnplug=`echo $i | awk -F= '{print $2}'`;;
					#mSreenOffTimeoutSetting=*) ScreenOffTimeout=`echo $i | awk -F= '{print $2}'`;;
					#mScreenBrightnessSetting=*) CurrentScreenBrightness=`echo $i | awk -F= '{print $2}'`;;
					#mScreenBrightnessSettingMinimum=*) ScreenBrigtnessMin=`echo $i | awk -F= '{print $2}'`;;
					#mScreenBrightnessSettingMaximum=*) ScreenBrigtnessMax=`echo $i | awk -F= '{print $2}'`;;
					#mScreenBrightnessSettingDefault=*) ScreenBrigtnessDef=`echo $i | awk -F= '{print $2}'`;;
					#Suspend*size=*) SuspendBlockers=`echo $i | awk -F= '{print $2}'`;;
					#mWakefulness=*) Wakefulness=`echo $i | awk -F= '{print $2}'`;;
					#mWakefulnessChanging=*) WakefulnessChanging=`echo $i | awk -F= '{print $2}'`
					*) :;;
				esac
			done
			#-- Get data about charging
			ChargingAC=`cat /sys/class/power_supply/*ac*/online`
			ChargingUSB=`cat /sys/class/power_supply/*usb*/online`
			local plugged=$(($ChargingAC+$ChargingUSB))
			Charging=`if [ plugged -ge 1 ]; then echo true; else echo false; fi`
		}
		#-- Updates what profile should be active
		Upd_Profile () {
			local UserData=/data/The_thing/Usedata
			if [[ $LowBatteryTrigger -ge $BatteryLevel || $BatteryLevelLow = "true" ]]; then
				ProfileUser="Battery"
			elif [[ -s $UserData/Gaming_triggers.txt && -n `ps | grep -f $UserData/Gaming_triggers.txt` ]]; then
				ProfileUser="Game"
			elif [[ -s $UserData/Internet_triggers.txt && -n `ps | grep -f $UserData/Internet_triggers.txt` ]]; then
				ProfileUser="Internet"
			elif [[ -s $UserData/Multitasking_triggers.txt && -n `ps | grep -f $UserData/Multitasking_triggers.txt` ]] || if [ `GetMulti` -ge 6 ]; then
				ProfileUser="Multitasking"
			elif [[ -s $UserData/Performance_triggers.txt && -n `ps | grep -f $UserData/Performance_triggers.txt` ]] || if [[ `top -n1 | grep "CPU:" | awk '{printf "%.0f\n",$8}'` -le 20 && $LastUseractivity -le 200 ]]; then
				ProfileUser="Perfomace"
			elif [[ -s $UserData/Music_triggers.txt && -n `ps | grep -f $UserData/Music_triggers.txt` ]]; then
				ProfileUser="Music"
			else
				ProfileUser="Default"
			fi
		}
	}
	#-- Monitors Battery and Music Profiles & Runs killer and cleaner & Runs Wake_Lock_Blocker every loop
	ScreenOff () {
		ScreenOffRunning="true"
		Killer
		Cleaner
		while [ $DisplayState = "OFF" ]; do
			if [[ $ProfileUser = "Music" && $ProfileActive != "Music" ]]; then
				ProfileActive="Music"
				SetProfile BATTERY MUSIC
			elif [ $ProfileActive != "Battery" ]; then
				ProfileActive="Battery"
				SetProfile BATTERY PURE
				Wake_Lock_Blocker
			else
				Wake_Lock_Blocker
			fi
			sleep `echo $Tim_Interval`0
		done
		ScreenOffRunning="false"
	}
	#-- Monitors all profiles and runs ProcessLock once a loop
	ScreenOn () {
		ProfileActive="Default"
		SetProfile DEFAULT
		OutputToast &
		while [ $DisplayState = "ON" ]; do
			case $ProfileUser in
				Performance)
					SetProfile PERFORMANCE PURE
					ProfileActive="Performance"
				;;
				Game)
					SetProfile PERFORMANCE GAME
					ProfileActive="Game"
				;;
				Multitasking)
					SetProfile MULTITASKING PURE
					ProfileActive="Multitasking"
				;;
				Internet)
					SetProfile MULTITASKING INTERNET
					ProfileActive="Internet"
				;;
				Battery)
					SetProfile BATTERY PURE
					ProfileActive="Battery"
				;;
				Music)
					SetProfile BATTERY MUSIC
					ProfileActive="Music"
				;;
				Default)
					SetProfile DEFAULT
					ProfileActive="Default"
				;;
			esac
			ProcessLock
			sleep $Tim_Interval
		done
	}
	# Controls charging and calibrates battery during the night
	Charging () {
		ChargingRunning="true"
		if [ -e /sys/kernel/fast_charge/screen_om_current_limit ]; then echo 1 > /sys/kernel/fast_charge/screen_om_current_limit; fi
		if [ -e /sys/kernel/fast_charge/use_mtp_during_fast_charge ]; then echo 1 > /sys/kernel/fast_charge/use_mtp_during_fast_charge; fi
		if [ -e /sys/kernel/fast_charge/failsafe ]; then echo 0 > /sys/kernel/fast_charge/failsafe; fi
		if
		if [ -d /sys/kernel/fast_charge ]; then
			if [ $ChargingUSB -eq 1 ]; then
				local CHARGING_PORT=usb
				Charge_Levels usb
			else
				local CHARGING_PORT=ac
				Charge_Levels ac
			fi
			while [ $Charging = "true" ]; do
				if [ -f "/sys/class/power_supply/battery/voltage_now" ]; then CurrenMV=$((`cat /sys/class/power_supply/battery/voltage_now`/1000))
				elif [ -f  "/sys/class/power_supply/battery/batt_vol" ]; then CurrenMV=`cat  /sys/class/power_supply/battery/batt_vol`
				else CurrenMV=$(((4200-((4200/100)*$BatteryLevel))+300)); fi
				if [[ $CurrenMV -qe 4200 && $DisplayState = "OFF" &&  `date +%H` -ge $SleepStartTime && `date +%H` -le $SleepEndTime ]]; then
					rm /data/system/batterystats.bin
					if [ $AllowAutoReboot = "true" ]; then
						shouldReboot="No need for rebooting"
						rm -fr /data/dalvik-cache/*
						reboot
					else
						ShouldReboot="The device should be rebooted"
						echo "Battery was calibrated" >> /data/The_Thing/System/ToastQueue.txt
						echo "The device should be rebooted" >> /data/The_Thing/System/ToastQueue.txt
					fi
				fi
				if [ $Batterylevel  -le 80 ]; then # ac_charge_level = second to last OR usb_charge_level = fastes
					Charge_Format="Fast | From | $CHARGING_PORT"
					local temp=$(($NUMBER_OF_LEVELS-$ChargingAC))
					eval CURRENT_LEVEL=$` echo CHARGE_LEVEL$temp`
					echo $CURRENT_LEVEL > /sys/kernel/fast_charge/`echo $CHARGING_PORT`_charge_level
				elif [[ $BatteryLevel -gt 80 && $BatteryLevel -lt 95 ]]; then # ac_charge_level = midle OR usb_charge_level = midle
					Charge_Format="Slow | From | $CHARGING_PORT"
					local temp=$(($NUMBER_OF_LEVELS/2+1))
					eval CURRENT_LEVEL=$` echo CHARGE_LEVEL$temp`
					echo $CURRENT_LEVEL > /sys/kernel/fast_charge/`echo $CHARGING_PORT`_charge_level
				else # ac_charge_level = last OR usb_charge_level = last
					echo 200 > /sys/class/leds/led_g/brightness
					if [[ $AllowNotficationTune -eq 1 && `date +%H` -le $SleepStartTime && `date +%H` -ge $SleepEndTime ]]; then
						am start -a com.android.music/.MediaPlaybackActivity -d file://data/The_Thing/Usedata/ThingNotification.mp3
					fi
					if [ $BatteryLevel -gt 99 ]; then # Stop charging
						Charge_Format="Stopped | From | $CHARGING_PORT"
						echo 0 > /sys/kernel/fast_charge/`echo $CHARGING_PORT`_charge_level
					else
						Charge_Format="Trickle | From | $CHARGING_PORT"
						eval CURRENT_LEVEL=$CHARGE_LEVEL1
						echo $CURRENT_LEVEL > /sys/kernel/fast_charge/`echo $CHARGING_PORT`_charge_level
				fi
				sleep $Tim_Interval
			done
		fi
		ChargingRunning="false"
		echo 0 > /sys/class/leds/led_g/brightness
	}
	# Endles Main test loop
	Main_Loop () {
		while :; do
		CURRENT_TIME=`date +%s`
		Upd_State
		Upd_Profile
		if [[ $DisplayState = "OFF" && $ScreenOffRunning = "false" ]]; then
			ScreenOff &
		elif [[ $DisplayState = "ON" && $ScreenOnRunning = "false" ]]; then
			ScreenOn &
		fi
		if [[ $Charging = "true" && $ChargingRunning = "false" ]]; then
			Charging &
		fi
		if test $NextClean -le $CURRENT_TIME; then
			Cleaner
			Upd_Interval Cl_Interval NextClean
		fi &
		if test $NextFstrim -le $CURRENT_TIME; then
			Fstrim
			Upd_Interval Fs_Interval NextFstrim
		fi &
		if test $NextOptimization -le $CURRENT_TIME; then
			Optimizer
			Upd_Interval Op_Interval NextOptimization
		fi &
		if test $NextKill -le $CURRENT_TIME; then
			Killer
			Upd_Interval Ki_Interval NextKill
		fi &
		Logi
		sleep $Tim_Interval
		done
	}
	Variables
	Functions
	Main_Loop
}
Tim
