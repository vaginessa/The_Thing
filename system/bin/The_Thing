#!/system/xbin/busybox ash
# "THE THING (The_Thing)"
#Made by _Bon_Bon(@XDA)
#All parts of this MOD and all the code in it
#are protected by GNU GPL, version 3
#Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
#see <http://www.gnu.org/licenses/>
#Delete next comment to enable debuging
#set -x
TheThing () {
	mount -o remount,rw /
	mount -o remount,rw rootfs
	mount -o remount,rw /system
	if [ -z $1 ]; then 1=M; fi
	#-- Set_Settings --#
	Set_Ings () {
		#-- Intervals
		for i in `cat /data/The_Thing/System/Interval_settings.txt`; do $i; done
		#-- Tweak Engine
		for i in `cat /data/The_Thing/System/Tweak_Engine_settings.txt`; do $i; done
		#-- Fstrim
		for i in `cat /data/The_Thing/System/Fstrim_settings.txt`; do $i; done
		#-- Optimizer (Zipaligner & SQLite Optimizer & PermFixer)
		for i in `cat /data/The_Thing/System/Optimizer_settings.txt`; do $i; done
		#-- Smoothie
		for i in `cat /data/The_Thing/System/Smoothie_settings.txt`; do $i; done
		#-- Cleaner
		for i in `cat /data/The_Thing/System/Cleaner_settings.txt`; do $i; done
		#-- Ram Booster
		for i in `cat /data/The_Thing/System/Ram_Booster_settings.txt`; do $i; done
		#-- Killer --#
		for i in `cat /data/The_Thing/System/Killer_settings.txt`; do $i; done
		#-- Tim --#
		for i in `cat /data/The_Thing/System/Tim_settings.txt`; do $i; done
	}
	#-- Update_Settings --#
	Up_Ings () {
		#-- Intervals
		cat > /data/The_Thing/System/Interval_settings.txt <<EOF
Fs_Interval=$Fs_Interval
Op_Interval=$Op_Interval
Cl_Interval=$Cl_Interval
Ki_Interval=$Ki_Interval
EOF
		#-- Tweak Engine
		 cat >  /data/The_Thing/System/Tweak_Engine_settings.txt <<EOF
Tw_Boot=$Tw_Boot
Tw_Audio=$Tw_Audio
Tw_Battery=$Tw_Battery
Tw_Camera=$Tw_Camera
Tw_IO=$Tw_IO
Tw_Kernel=$Tw_Kernel
Tw_LogEr=$Tw_LogEr
Tw_Net=$Tw_Net
Tw_Tiwlan=$Tw_Tiwlan
EOF
		#-- Fstrim
		cat >  /data/The_Thing/System/Fstrim_settings.txt <<EOF
Fs_Boot=$Fs_Boot
Fs_Cache=$Fs_Cache
Fs_Data=$Fs_Data
Fs_Preload=$Fs_Preload
Fs_System=$Fs_System
EOF
		#-- Optimizer (Zipaligner & SQLite Optimizer & PermFixer)
		cat >  /data/The_Thing/System/Optimizer_settings.txt <<EOF
Op_Boot=$Op_Boot
Op_Data=$Op_Data
Op_Sqlite=$Op_Sqlite
Op_System=$Op_System
EOF
		#-- Smoothie
		cat >  /data/The_Thing/System/Smoothie_settings.txt <<EOF
Sm_Boot=$Sm_Boot
Sm_UI=$Sm_UI
Sm_GAME=$Sm_GAME
EOF
		#-- Cleaner
		cat >  /data/The_Thing/System/Cleaner_settings.txt <<EOF
Cl_Boot=$Cl_Boot
Cl_Cache=$Cl_Cache
Cl_Dropbox=$Cl_Dropbox
Cl_Logs=$Cl_Logs
Cl_Usagestats=$Cl_Advanced
Cl_Useless=$Cl_Useless
EOF
		#-- Ram Booster
		cat >  /data/The_Thing/System/Ram_Booster_settings.txt <<EOF
Ra_Boot=$Ra_Boot
Ra_Memory=$Ra_Memory
Ra_Merge=$Ra_Merge
EOF
		#-- Killer
		cat >  /data/The_Thing/System/Killer_settings.txt <<EOF
Ki_Boot=$Ki_Boot
EOF
		#-- Tim
		cat > /data/The_Thing/System/Tim_settings.txt <<EOF
AllowAutoReboot=$AllowAutoReboot
SleepStartTime=$SleepStartTime
SleepEndTime=$SleepEndTime
AllowNotificationTune=$AllowNotificationTune
Tim_Interval=$Tim_Interval
LowBatteryTrigger=$LowBatteryTrigger
EOF
	}
	#-- Functions --#
	Functions () {
		#-- Display info from The_Thing. Tim and the various profiles
		Version_Info () {
			echo "\"THE THING (The_Thing)\"
					Made by _Bon_Bon(@XDA)
					All parts of this MOD and all the code in it
					are protected by GNU GPL, version 3
					Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
					see <http://www.gnu.org/licenses/>"
			echo -e "VERSION:\t1.0b"
			echo -e $divider
			echo "TIM & Profile information:"
			echo ""
			echo "TIM: VERSION 0.1b"
			echo "PROFILES:"
			echo "Performance: `/data/The_Thing/Profiles/Performance_Profile -v`"
			echo "Battery: `/data/The_Thing/Profiles/Battery_Profile -v`"
			echo "Multitasking: `/data/The_Thing/Profiles/Multitasking_Profile -v`"
		}
		#-- exit with stuff --#
		exitm () {
			mount -o remount,ro /system
			sync
			Up_Ings
			$1
			exit
		}
		#-- LogEngine --#
		Logi () {
			echo $1 | tee -a $2
		}
		#-- Permission Changer --#
		SetPerm () {
			chown $1:$2 $4
			chmod $3 $4
		}
		#-- Include apps to lock or kill list --#
		App_Includer () {
			clear
			echo -e "\tDATA\t\t | \t\tSYSTEM"
			for SYSTEM in `ls /system/app`; do
				for DATA in `ls /data/app | sed 's/-[[:digit:]]*$//'`; do
					echo -n "$DATA | " 
				done
				echo "$SYSTEM"
			done
			echo ""
			echo "Type a app from above you want included"
			echo "Type exit to exit"
			read input
			if [ $input = "exit" ]; then ret=2;
			elif [[ $SWITCH = "disallow" && -e /system/app/$input ]]; then
				echo "Are you sure you want to include system apps?"
				echo "This can be dangerous if you don't know what you're doing"
				echo -n "[Y/N] :"; read choice
				case $choice in
					Y|y)
						SWITCH="allow"
						echo $input >> /data/The_Thing/Userdata/$1
						echo "App $input added"
						sleep 3
						ret=1
					;;
					*) :;;
			else
				echo $input >> /data/The_Thing/Userdata/$1
				echo "App $input added"
				sleep 3
				ret=1
			fi
		}
		#-- Exclude apps AND junk from their lists --#
		App_Excluder () {
			clear
			echo ""
			while read line; do echo "$line\n"; done < /data/The_Thing/Userdata/$1
			echo ""
			echo "Type the $2 from above you want excluded"
			echo "Type exit to exit"
			read input
			if [ $input = "exit" ]; then ret=2;
			else
				sed -i 's/$input/d' /data/The_Thing/Userdata/$1
				echo "$2 $input removed"
				sleep 3
				ret=1
			fi
		}
		#-- Change the interval between script runs --#
		Change_Interval () {
			clear
			echo "Change the interval between $1 runs"
			echo "It currently runs every $2 $3"
			echo "Type the new desired interval:"
			echo "NOTE: The value has to be a full number"
			read input
			return $input
		}
		#-- Backup manager thingy --#
		BackMgr () {
			DIRECT=$1
			clear
			ls /data/The_Thing/Backup/$DIRECT
			echo ""
			echo "Type Remove or Restore"
			echo "Type exit to exit"
			read choice
			if [ $choice = "exit" ]; then ret=2
			elif [[ $choice = "remove" || $choice = "Remove" ]]; then
				if [ -e /data/The_Thing/Backup/$DIRECT/$choice ]; then
					echo "Type a directory from above"
					echo -n "Remove:"; read choice
					rm -f /data/The_Thing/Backup/$DIRECT/$choice
					echo "Removed $choice"
					ret=1
				else
					echo "There was a typo ;) Don't worry, you can try again"
				fi
			elif [[ $choice = "restore" || $choice = "Restore" ]]; then
				if [ -e /data/The_Thing/Backup/$DIRECT/$choice ]; then
					echo -n "Restore:"; read choice
					cp  /data/The_Thing/Backup/$DIRECT/$choice /system/app
					chmod -R 644 /system/app/$choice 
					echo "Restored $choice"
					ret=1
				else
					echo "There was a typo ;) Don't worry, you can try again"
				fi
			fi
		}
		#-- Control the Default_Profile --#
		ProfileMgr () {
			clear
			echo "Select the governor you want enabled:"
			echo "[O]nDemand | [C]onservative"
			echo ""
			read choice
			case choice in
				O|o) local governor=Ondemand;;
				C|c) local governor=Conservative;;
				*) local governor=Conservative;;
			esac
			echo "Select the I/O Scheduler you want enabled:"
			echo "[N]oop | [D]eadline"
			echo ""
			read choice
			case choice in
				N|n) local governor=Noop;;
				D|d) local schedname=Deadline;;
				*) local governor=Noop;;
			esac
			echo "Select the TCP Congestion type you want enabled:"
			echo "[W]estwood | [C]bic"
			echo ""
			read choice
			case choice in
				W|w) local tcpname=Westwood;;
				C|c) local tcpname=Cubic;;
				*) local tcpname=Westwood;;
			esac
			ret=2
		}
		#-- Creates Swap / Zram based on how much ram the device has --#
		MakeSwap () {
				amount=$((mem*64))
				case $1 in
					swap)
						mount -o remount,rw /cache
						swapoff /dev/block/loop7
						rm -rf /cache/swap
						rm -rf /data/property/swapfile-run
						mkdir -p /cache/swap
						echo $amount > /cache/swap/swap.file
						losetup /dev/block/loop7  /cache/swap/swap.file
						mkswap /dev/block/loop7
						swapon /dev/block/loop7 
						if cat /proc/swaps | grep -q loop7; then
							mkdir /data/property/swapfile-run
						else
							echo "Something went wrong..."
							echo "The swap wasn't enabled..."
							echo "Try restarting and reruning this option"
							rm -f /cache/swap/swap.file
						fi
					;;
					zram)
						if [ -d /sys/block/zram0 ];then
							echo lz4 > /sys/block/zram0/comp_alogrithm
							echo $amount > /sys/block/zram0/disksize
							mkswap /dev/block/zram0
							swapon /dev/block/zram0
						else
							echo "Zram isn't supported by your device'"
						fi
					;;
				esac
			}
		#-- Process Locker--#
		PROC_LOCK () {
			if [ -s /data/The_Thing/System/Userdata/Ram_Lock_data ]; then
				Logi "Locking apps to memory" $RAL
				for APP in `cat /data/The_Thing/Userdata/Ram_Lock_data.txt`; do
					if [ "`pgrep $APP`" ]; then
						for LOCK in `pgrep $APP`; do
							echo -17 > /proc/$LOCK/oom_adj
							echo -1000 > /proc/$LCOK/oom_score_adj
							renice -10 $LOCK
							Logi "Locked $LOCK" $RAL
						done
					else
						Logi "App $APP isn't running, so it won't' be locked" $RAL
					fi
				done
			else
				Logi "No Apps to Lock" $RAL
			fi
		}
		#-- Creates sysinit --#
		crt_sysinit () {
			sed -i '/Start_Of_Initsim/,/End_Of_Initsim/d' /system/bin/sysinit
			cat > /system/bin/sysinit <<"EOF"
#!/system/bin/sh
#Start_Of_Initsim
#Made by _Bon_Bon(XDA)
#Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
#see <http://www.gnu.org/licenses/>
#The_inti.d_Simulator made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
export PATH=/sbin:/system/sbin:/system/bin:/system/xbin
busybox run-parts /system/etc/init.d
#End_Of_Initsim
EOF
}
		#-- Creates recovery.sh --#
		crt_recovery_start () {
			sed -i '/Start_Of_Initsim/,/End_Of_Initsim/d' /system/etc/install-recovery.sh
			cat > /system/etc/install-recovery.sh <<"EOF"
#!/system/bin/sh
#Start_Of_Initsim
#Made by _Bon_Bon(XDA)
#Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
#see <http://www.gnu.org/licenses/>
#The_inti.d_Simulator made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
#Run init.d scripts
/system/bin/sysinit
EOF
}
		crt_recovery_end () {
			cat > /system/etc/install-recovery.sh <<"EOF"
#Execute install-recovery-2.sh
#If you want to use install-recovery.sh, use install-recovery-2.sh instead
/system/etc/install-recovery-2.sh
EOF
}
		#-- BootUp --#
		Bo_Ot () {
			if [ Sm_Boot -eq 1 ]; then Smooth_Script; fi;
			if [ Cl_Boot -eq 1 ]; then Cleaner_Script; fi;
			if [ Fs_Boot -eq 1 ]; then Fstrim_Script; fi;
			if [ Op_Boot -eq 1 ]; then Optimizer_Script; fi;
			if [ Ki_Boot -eq 1 ]; then Killer_Script; fi;
			if [ Tw_Boot -eq 1 ]; then Tweak_Script; fi;
			if [ Ra_Boot -eq 1 ]; then Ram_Script; fi;
			fi
		}
	}
	#-- SuperUser checker --# MINE!
	SuCheck () {
		echo -e $divider
		if [[ ! `id -u` -eq 0 || ! `id -u` = "root" ]]; then
			echo "You're not running as root!"
			echo "Next time type \"su\" before running this script"
			exitm exit
		fi
	}
	#-- Variables --#
	Variables () {
		divider="=============================================\n"
		ON="\e[0;102m=O\e[00;37;40m"; #-- Green - NoColor
		OFF="\e[0;101mO=\e[00;37;40m"; #-- Red - NoColor
		mem=`awk '/MemTotal/{print $2}' /proc/meminfo`
		IN_SD=`echo $EXTERNAL_STORAGE`
		EX_SD=`echo ${SECONDARY_STORAGE&&:*}`
	}
	#-- Scripts --#
	Scripts () {
		#-- Killer --#
		Killer_Script () {
			local KIL=/data/The_Thing/Killer.log
			if [ -n $1 ]; then
				for KILL in $@; do
					pkill -9 $KILL
				done
			else
				rm -f $KIL
				touch $KIL
				Logi "Killer started at: $(date +"%k:%M %m-%d")" $KIL
				for KILL in `cat /data/The_Thing/System/Killer_data.txt`; do
					pkill -9 $KILL
					Logi "Killed $KILL" $KIL
				done
				if [ -s /data/The_Thing/Userdata/Killer_User_data.txt ]; then
					Logi "Useradded processes:" $KIL
					for KILL in `cat /data/The_Thing/Userdata/Killer_data.txt`; do
						pkill -9 $KILL
						Logi "Killed $KILL" $KIL
					done
				else
					Logi "The User Kill-List is empty"
				fi	
				Logi "" $KIL
				Logi "___________________________________" $KIL
				Logi "No-Scoped those apps like A BRO" $KIL
			fi
		}
		#-- App Optimizer (Zipaligner & SQLite Optimizer & Permission Fixer) --#
		Optimizer_Script () {
			local OPT=/data/The_Thing/Optimizer.log
			rm -f $OPT
			touch $OPT
			Optimize () {
				for DIR in $1; do
					cd $DIR
					for APK in *.apk; do
						zipalign -c 4 $APK
						if [ $? -eq 0 ]; then
							Logi "Already aligned: $DIR/$APK" $OPT
						else
							Logi "Now aligning: $DIR/$APK" $OPT
							zipalign -f 4 $APK /cache/$APK
							cp -fp /cache/$APK $APK
							if [[ "$DIR" = "/system/framework" || "$DIR" = "/system/app" || "$DIR" = "/vendor/app" || "$DIR" = "/system/priv-app" ]]; then SetPerm 0 0 644 $APK
							elif [ "$DIR" = "/data/app" ]; then SetPerm 1000 1000 644 $APK
							fi
							rm -f /cache/$APK
						fi
					done
				done
			}
			SQLite () {
					Logi "___________________________________" $OPT
					Logi "SQLite database VACUUM and REINDEX started at: $( date +"%m-%d-%Y %H:%M:%S" )" $OPT
					for i in `find /d* -iname "*.db"`; do
						sqlite3 $i 'VACUUM;'
						local VACRET=$?
						if [ $VACRET -eq 0 ]; then
							local VACRET="SUCCESS"
						else
							local VACRET="ERRCODE: $VACRET"
						fi
						sqlite3 $i 'REINDEX;'
						local INDRET=$?
						if [ $INDRET -eq 0 ]; then
							local INDRET="SUCCESS"
						else
							local INDRET="ERRCODE: $INDRET"
						fi
						Logi "Database $i:  VACUUM=$VACRET  REINDEX=$resIndex" $OPT
					done
					Logi "___________________________________" $OPT
					Logi "SQLite database VACUUM and REINDEX finished at $( date +"%m-%d-%Y %H:%M:%S" )" $OPT
				}
			if [ -n $1 ]; then
				for i in $@; do
					case $i in
						--DATA) Optimize /data/app;;
						--SYSTEM)
							Optimize /system/app
							Optimize /system/priv-app
							Optimize /system/framework
							Optimize /vendor/app
						;;
						--SQLITE) SQLite;;
						*) :;;
					esac
				done
			else
				Logi "___________________________________" $OPT
				Logi "Started Optimization at: $(date +"%k:%M %m-%d")" $OPT
				#-- Optimize /data
				if [ $Op_Data -eq 1 ]; then
					Logi "Aligning /data" $OPT
					Optimize /data/app
				fi
				#-- Optimize /system
				if [ $Op_System -eq 1 ]; then
					Logi "Aligning /system" $OPT
					Optimize /system/app
					Optimize /system/priv-app
					Optimize /system/framework
					Optimize /vendor/app
				fi
				#-- SQLite Optimization
				if [ $Op_Sqlite -eq 1 ]; then
					SQLite
				fi
				Logi "___________________________________" $OPT
				Logi "Finished Optimizing at: $( date +"%m-%d-%Y %H:%M:%S" )" $OPT
			fi
		}
		#-- Fstrim --#
		Fstrim_Script () {
			mount -o remount,rw /cache
			mount -o remount,rw /data
			mount -o remount,rw /preload
			local FSL=/data/The_Thing/Fstrim.log
			rm -f $FSL
			touch $FSL
			if [ -n $1 ]; then
				for i in $@; do
					case $i in
						--DATA) fstrim /data;;
						--SYSTEM) fstrim /system;;
						--CACHE) fstrim /cache;;
						--PRELOAD) fstrim /preload;;
						*) :;;
					esac
				done
			else
				Logi "___________________________________" $FSL
				Logi "Trimmer started at: $(date +"%k:%M %m-%d")" $FSL

				if [ $Fs_Cache -eq 1 ]; then
					Logi "Cahce:" $FSL
					fstrim -v /cache | tee -a $FSL
				else
					Logi "Cahce Trimming has been turned off" $FSL
				fi
				if [ $Fs_Data -eq 1 ]; then
					Logi "Data:" $FSL
					fstrim -v /data | tee -a $FSL
				else
					Logi "Data Trimming has been turned off" $FSL
				fi
				if [ $Fs_System -eq 1 ]; then
					Logi "System:" $FSL
					fstrim -v /system | tee -a $FSL
				else
					Logi "System Trimming has been turned off" $FSL
				fi
				if [ $Fs_Preload -eq 1 ]; then
					Logi "Preload:" $FSL
					fstrim -v /preload | tee -a $FSL
				else
					Logi "Preload Trimming has been turned off" $FSL
				fi
				Logi "___________________________________" $FSL
				Logi "Done trimming!" $FSL
			fi
		}
		#-- Tweak Engine --#
		Tweak_Script () {
			local TWL=/data/The_Thing/Tweak_Engine.log
			local BDI=`ls -d /sys/devices/virtual/bdi/*`
			local ipv4=/proc/sys/net/ipv4
			rm -f $TWL
			touch $TWL
			Logi "___________________________________" $TWL
			Logi "Tweak Engine ran: $(date +"%k:%M %m-%d")" $TWL
			#-- Tiwlan.ini --#
			if [ $Tw_Tiwlan -eq 1 ]; then
				for i in `find /system -iname "tiwlan*.ini"`; do
					sed -i '/HT_Enable=/s/e= *./e=1/' $i
					sed -i '/HT_Enable =/s/e = *./e = 1/' $i
					sed -i '/BurstModeEnable =/s/e = *./e = 1/' $i
					sed -i '/WiFiAdhoc =/s/c = *./c = 1/' $i
					sed -i '/Single_Dual_Band_Solution =/s/n = *./n = 1/' $i
					sed -i '/RoamScanEnable =/s/e = *./e = 1/' $i
					sed -i '/SRState =/s/e = *./e = 1/' $i
					sed -i '/SRF/s/^#//' $i
				done
			else
				Logi "Tiwlan.ini tweaks have been turned off" $TWL
			fi
			#-- Kernel tweaks --#
			if [ $Tw_Kernel -eq 1 ]; then
				Logi "Applying various Kernel Tweaks" $TWL
				sysctl -e -w kernel.msgmni=2048
				sysctl -e -w kernel.msgmax=65536
				sysctl -e -w kernel.random.read_wakeup_threshold=2048
				sysctl -e -w kernel.random.write_wakeup_threshold=4096
				sysctl -e -w kernel.shmmni=4096
				sysctl -e -w kernel.shmall=2097152
				sysctl -e -w kernel.shmmax=268435456
				sysctl -e -w kernel.sem="500 512000 64 2048"
				sysctl -e -w kernel.sched_features=24189
				sysctl -e -w kernel.sched_latency_ns=18000000
				sysctl -e -w kernel.sched_min_granularity_ns=1500000
				sysctl -e -w kernel.sched_wakeup_granularity_ns=3000000
				sysctl -e -w kernel.sched_compat_yield=1
				sysctl -e -w kernel.sched_shares_ratelimit=256000
				sysctl -e -w kernel.sched_child_runs_first=0
				sysctl -e -w kernel.threads-max=524288
				sysctl -e -w fs.lease-break-time=10
				sysctl -e -w fs.file-max=524288
				sysctl -e -w fs.inotify.max_queued_events=32000
				sysctl -e -w fs.inotify.max_user_instances=256
				sysctl -e -w fs.inotify.max_user_watches=10240
				echo 25 > /proc/sys/kernel/hung_task_timeout_secs #30/0
				echo 0 > /proc/sys/kernel/softlockup_panic
				echo 0 > /proc/sys/kernel/panic_on_oops
				echo 0 > /proc/sys/kernel/panic
			else
				Logi "Kernel Tweaks have been turned off" $TWL
			fi
			#-- I/O & storage Tweaks --#
			if [ $Tw_IO -eq 1 ]; then
				Logi "Applying various I/O & Storage Tweaks" $TWL
				local SDReadTweak=$((((mem/1024)/64+1)*128))
				for i in $BDI; do
					if [ -e $i/read_ahead_kb ]; then
						echo $SDReadTweak > $i/read_ahead_kb
					fi
				done
				#local STL=`ls -d /sys/block/stl*`
				#local BML=`ls -d /sys/block/bml*`
				#local MMC=`ls -d /sys/block/mmc*`
				for i in /sys/block/*/queue; do
					if [ -e $i/rotational ]; then echo 0 > $i/rotational; fi
					if [ -e $i/nr_requests ]; then echo 10240 > $i/nr_requests; fi
					if [ -e $i/iosched/fifo_batch ]; then echo 1 > $i/iosched/fifo_batch; fi
					if [ -e $i/iosched/writes_starved ]; then echo 1 > $i/iosched/writes_starved; fi
					if [ -e $i/read_ahead_kb ]; then echo 2024 >  $i/read_ahead_kb; fi
					if [ -e $i/iosched/low_latency ]; then echo 1 > $i/iosched/low_latency; fi
					if [ -e $i/iosched/back_seek_penalty ]; then echo 1 > $i/iosched/back_seek_penalty; fi
					if [ -e $i/iosched/back_seek_max ]; then echo 1000000000 > $i/iosched/back_seek_max; fi
					if [ -e $i/iosched/slice_idle ]; then echo 0 > $i/slice_idle; fi
					if [ -e $i/iosched/quantum ]; then echo 16 > $i/quantum; fi
					if [ -e $i/iostats; then ]; echo 0 > $i/iostats; fi
					if [ -e $i/nomerges ]; then echo 0 > $i/nomerges; fi
				done
			else
				Logi "I/O and Storage Tweaks have been turned off" $TWL
			fi
			#--  Network speed Tweaks --#
			if [ $Tw_Net -eq 1 ]; then
				Logi "Applying various Network Tweaks" $TWL
				if [ "$mem" -lt 1024000 ]; then
					echo "57344 57344 524288" > $ipv4/tcp_mem
				else
					echo "187000 187000 187000" > $ipv4/tcp_mem
				fi
				echo 2500 > /proc/sys/net/core/netdev_max_backlog
				echo 1 > $ipv4/tcp_dsack
				echo 0 > $ipv4/ip_dynaddr
				sysctl -e -w net.ipv4.tcp_fin_timeout=20
				sysctl -e -w net.ipv4.tcp_keepalive_intvl=30
				sysctl -e -w net.ipv4.tcp_keepalive_probes=5
				sysctl -e -w net.ipv4.tcp_keepalive_time=1800
				sysctl -e -w net.ipv4.tcp_moderate_rcvbuf=1
				sysctl -e -w net.ipv4.route.flush=1
				sysctl -e -w net.ipv4.udp_rmem_min=6144
				sysctl -e -w net.ipv4.udp_wmem_min=6144
				sysctl -e -w net.ipv4.tcp_rfc1337=1
				sysctl -e -w net.ipv4.ip_no_pmtu_disc=0
				sysctl -e -w net.ipv4.tcp_ecn=0
				sysctl -e -w net.ipv4.tcp_sack=1
				sysctl -e -w net.ipv4.tcp_window_scaling=1
				sysctl -e -w net.core.rmem_max=2097152
				sysctl -e -w net.core.wmem_max=2097152
				sysctl -e -w net.core.rmem_default=262144
				sysctl -e -w net.core.wmem_default=262144
				sysctl -e -w net.core.optmem_max=20480
				sysctl -e -w net.unix.max_dgram_qlen=50
				sysctl -e -w net.ipv4.tcp_rmem="6144 87380 1048576"
				sysctl -e -w net.ipv4.tcp_wmem="6144 87380 1048576"
				#-- Re-use sockets in time-wait state --#
				sysctl -e -w net.ipv4.tcp_tw_recycle=1
				sysctl -e -w net.ipv4.tcp_tw_reuse=1
				#-- Don't accept source routing
				sysctl -e -w net.ipv4.conf.all.accept_source_route=0
				sysctl -e -w net.ipv4.conf.default.accept_source_route=0 
				#-- Don't accept redirects
				sysctl -e -w net.ipv4.conf.all.accept_redirects=0
				sysctl -e -w net.ipv4.conf.default.accept_redirects=0
				sysctl -e -w net.ipv4.conf.all.secure_redirects=0
				sysctl -e -w net.ipv4.conf.default.secure_redirects=0
				#-- Enable spoofing protection
				sysctl -e -w net.ipv4.conf.all.rp_filter=1
				sysctl -e -w net.ipv4.conf.default.rp_filter=1
				sysctl -e -w net.ipv4.icmp_echo_ignore_all=1 #-- Ignore pings
				sysctl -e -w net.ipv4.icmp_echo_ignore_broadcasts=1;       #-- Don't reply to broadcasts (prevents joining a smurf attack)
				sysctl -e -w net.ipv4.icmp_ignore_bogus_error_responses=1; #-- Enable protection for bad error messages
				sysctl -e -w net.ipv4.tcp_max_tw_buckets=1440000 #-- Increase tw_buckets in case of DoS attack
				sysctl -e -w net.ipv4.tcp_no_metrics_save=1 #-- Don't cache connection metrics from previous connection
				sysctl -e -w net.ipv4.ip_forward=0 #-- Disable IP Packet forwarding
				#-- Don't behave as a router or pass traffic between networks
				sysctl -e -w net.ipv4.conf.all.send_redirects=0
				sysctl -e -w net.ipv4.conf.default.send_redirects=0
				#-- Hardening the TCP/IP stack incase of SYN attacks --#
				sysctl -e -w net.ipv4.tcp_syncookies=1
				sysctl -e -w net.ipv4.tcp_synack_retries=2
				sysctl -e -w net.ipv4.tcp_syn_retries=2
				sysctl -e -w net.ipv4.tcp_max_syn_backlog=1024
				if [ "$mem" -lt 512000 ]; then
					sysctl -e -w net.ipv4.tcp_timestamps=0
				else 
					sysctl -e -w net.ipv4.tcp_timestamps=1
				fi			
				sed -i '/The_Internet/,/The_End_Of_Internet/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_Internet tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
net.dns1=8.8.8.8
net.dns2=8.8.4.4
net.rmnet0.dns1=8.8.8.8
net.rmnet0.dns2=8.8.4.4
net.ppp0.dns1=8.8.8.8
net.ppp0.dns2=8.8.4.4
net.wlan0.dns1=8.8.8.8
net.wlan0.dns2=8.8.4.4
net.eth0.dns1=8.8.8.8
net.eth0.dns2=8.8.4.4
net.gprs.dns1=8.8.8.8
net.gprs.dns2=8.8.4.4
ro.ril.hsxpa=3
ro.ril.gprsclass=32
ro.ril.hep=1
ro.ril.enable.dtm=1
ro.ril.enable.sdr=1
ro.ril.hsdpa.category=28
ro.ril.enable.a53=1
ro.ril.enable.3g.prefix=1
ro.ril.htcmaskw1.bitmask=4294967295
ro.ril.htcmaskw1=268449905
ro.ril.hsupa.category=9
ro.ril.enable.a52=0
ro.ril.set.mtu1472=1
ro.ril.cdma.ppp.up=
ro.use_data_netmgrd=true
ro.ril.def.agps.mode=2
ro.ril.def.agps.feature=1
ro.ril.enable.gea3=1
persist.ril.uart.flowctrl=10
ro.ril.enable.fd.plmn.prefix=23402,23410,23411
persist.data_netmgrd_mtu=1482
persist.data_netmgrd_nint=8
net.tcp.buffersize.wifi=262144,524288,1048576,262144,524288,1048576
net.tcp.buffersize.edge=6144,26280,35040,6144,16384,35040
net.tcp.buffersize.umts=6144,87380,110208,6144,16384,110208
net.tcp.buffersize.gprs=6144,8760,11680,6144,8760,11680
net.tcp.buffersize.hspa=6144,87380,262144,6144,16384,262144
net.tcp.buffersize.hsdpa=6144,262144,1048576,6144,262144,1048576
net.tcp.buffersize.lte=262144,524288,3145728,262144,524288,3145728
net.tcp.buffersize.evdo_b=6144,262144,1048576,6144,262144,1048576
net.tcp.buffersize.default=6144,87380,110208,6144,16384,110208
ro.mot.eri.losalert.delay=1500
wifi.supplicant_scan_interval=190
ro.telephony.call_ring.delay=0
ring.delay=0
ro.lge.proximity.delay=25
mot.proximity.delay=25
ro.config.combined_signal=true
ro.config.vc_call_vol_steps=20
ro.mot.buttonlight.timeout=3
ro.telephony.default_network=10
ro.ril.enable.amr.wideband=1
ro.config.hw_fast_dormancy=1
persist.cust.tel.eons=1
media.stagefright.enable-player=true
media.stagefright.enable-meta=true
media.stagefright.enable-scan=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-record=false
#The_End_Of_Internet Tweaks
EOF
			else
				Logi "Network Tweaks have been turned off" $TWL
			fi
			#-- Battery Tweaks --#
			if [ $Tw_Battery -eq 1 ]; then
				Logi "Applying various Battery Tweaks" $TWL
				sed -i '/The_Battery/,/The_End_Of_Battery/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_Battery tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
pm.sleep_mode=2
ro.ril.disable.power.collapse=1
ro.config.hw_power_saving=1
power.saving.mode=1
proximity_incall=enable
usb_wakeup=enable
ro.ril.power_collapse=1
power_supply.wakeup=enable
# The_End_Of_Battery tweaks
EOF
			else
				Logi "Battery Tweaks have been turned off" $TWL
			fi
			#-- Disable error checking & Miscellaneous Android Logging --#
			if [ $Tw_LogEr -eq 1 ]; then
				Logi "Disabling Logging & Error checking" $TWL
				sed -i '/The_LogEr/,/The_End_Of_LogEr/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_LogEr tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
ro.kernel.android.checkjni=0
ro.kernel.checkjni=0
debugtool.anrhistory=0
profiler.debugmonitor=false
profiler.launch=false
profiler.hung.dumpdobugreport=false
ro.config.nocheckin=1
profiler.force_disable_err_rpt=1
profiler.force_disable_ulog=1
persist.android.strictmode=0
ro.config.tima=0
ro.config.knox=0
ro.securestorage.knox=false
security.mdpp=None
security.mdpp.result=None
wlan.wfd.hdcp=disable
# The_End_Of_LogEr tweaks
EOF
			else
				Logi "LogEr Tweaks have been turned off" $TWL
			fi
			#-- Audio Tweaks --#
			if [ $Tw_Audio -eq 1 ]; then
				Logi "Applying various Audio Tweaks" $TWL
				sed -i '/The_Audio/,/The_End_Of_Audio/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_Audio tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
af.resampler.quality=255
persist.audio.fluence.mode=endfire
persist.audio.hp=true
persist.audio.vr.enable=false
persist.audio.handset.mic=digital
persist.audio.lowlatency.rec=false
tunnel.decode=false
lpa.use-stagefright=false
ro.audio.samplerate=48000
ro.audio.pcm.samplerate=48000
af.resample=52000
# The_End_Of_Audio tweaks
EOF
			else
				Logi "Audio Tweaks have been turned off" $TWL
			fi
			#-- Camera Tweaks --#
			if [ $Tw_Camera -eq 1 ]; then
				Logi "Applying various Camera Tweaks" $TWL
				sed -i '/The_Camera/,/The_End_Of_Camera/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_Camera tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
ro.media.enc.hprof.vid.fps=65
ro.media.dec.aud.wma.enabled=1
ro.media.dec.vid.wmv.enabled=1
ro.media.capture.flash=led
ro.media.capture.flashMinV=3300000
ro.media.capture.torchIntensity=40
ro.media.capture.flashIntensity=70
ro.media.capture.maxres=16m
ro.media.capture.fast.fps=4
ro.media.capture.slow.fps=120
ro.media.panorama.defres=3264x1840
ro.media.panorama.frameres=1280x720
ro.camcorder.videoModes=true
ro.media.cam.preview.fps=0
ro.media.codec_priority_for_thumb=so
ime_extend_row_keyboard=true
ime_onehand_keyboard=true
ime_split_keyboard=true
ime_vibration_pattern=0:60
ro.media.dec.jpeg.memcap=8000000
ro.media.enc.hprof.vid.bps=8000000
ro.media.enc.jpeg.quality=100
# The_End_Of_Camera tweaks
EOF
			else
				Logi "Camera Tweaks have been turned off" $TWL
			fi
			Logi "___________________________________" $TWL
			Logi "Done Tweaking" $TWL
		}
		#-- Ram Booster --#
		Ram_Script () {
			local RAL=/data/The_Thing/Ram_Booster.log
			rm -f $RAL
			touch $RAL
			if [ $1 = "--LOCK" ]; then
				PROC_LOCK
			else
				Logi "___________________________________" $RAL
				Logi "Ram Booster ran: $(date +"%k:%M %m-%d")" $RAL
				#-- Memory Tweaks --#
				if [ $Ra_Memory -eq 1 ]; then
					Logi "Applying Memory Tweaks" $RAL
					#
					#	Heapsize & vm_dirty calculations
					#	Created by _Bon_Bon
					#
					local ram=$(($mem/1024))
					local heapsize=$(($ram*20/100+$ram*20/100%2))
					local heapgrowthlimit=$(($heapsize/2))
					local heapstartsize=$(($ram/100))
					local heapminfree=$((($mem+1)%10))
					local heapmaxfree=$(($heapminfree*4))
					local vmdirtybackground=`echo $((ram/50)) | awk '{printf "%.0f\n",$1*("0.".$1)}'`
					local vmdirty=$(($vmdirtybackground+($vmdirtybackground/3)))
					sysctl -e -w vm.dirty_background_ratio=$vmdirtybackground #60
					sysctl -e -w vm.dirty_ratio=$vmdirty #90
					setprop dalvik.vm.heapsize $heapsize'm'
					setprop dalvik.vm.heapgrowthlimit $heapgrowthlimit'm'
					setprop dalvik.vm.heapstartsize $heapstartsize'm'
					setprop dalvik.vm.heaptargetutilization=0.75
					setprop dalvik.vm.heapmaxfree $heapmaxfree'm'
					setprop dalvik.vm.heapminfree $heapminfree'm'
					#
					# MFK Calculator (for min_free_kbytes)
					# Created by zeppelinrox, rebuild and optimized by _Bon_Bon
					# Added oom_adj calculations and optimizations by _Bon_Bon
					#
					local minfreefile="/sys/module/lowmemorykiller/parameters/minfree"
					local SSADJ=`getprop ro.SECONDARY_SERVER_ADJ`
					local adjfile="/sys/module/lowmemorykiller/parameters/adj"
					if [ ! "$SSADJ" ]; then SSADJ=5; fi
					j=1
					for i in `cat $minfreefile | tr "," " "`; do
						eval "minfree$j=$i"
						j=$(($j+1))
					done
					if [ ! "$adjfile" ]; then oomadj1=0;oomadj2=1;oomadj3=2;oomadj4=4;oomadj5=9;oomadj6=15
					elif [ "`awk -F , '{print $3}' $adjfile`" -gt 15 ]; then
						j=1
						for i in `cat $adjfile | tr "," " "`; do
							i=$(($i*17/1000))
							eval "oomadj$j=`printf "%.0f\n" $i`"
							j=$(($j+1))
						done
						oomadj6=15
					else
						for i in `cat $adjfile | tr "," " "`; do
							eval "oomadj$j=$i"
							j=$(($j+1))
						done
					fi
					if [ "$SSADJ" -le "$oomadj1" ]; then SSMF=$minfree1
					elif [ "$SSADJ" -le "$oomadj2" ]; then SSMF=$minfree2
					elif [ "$SSADJ" -le "$oomadj3" ]; then SSMF=$minfree3
					elif [ "$SSADJ" -le "$oomadj4" ]; then SSMF=$minfree4
					elif [ "$SSADJ" -le "$oomadj5" ]; then SSMF=$minfree5
					else  SSMF=$minfree6
					fi
					MFK=$(($SSMF*4/5))
					sysctl -e -w vm.min_free_kbytes=$MFK
					sysctl -e -w vm.panic_on_oom=0
					sysctl -e -w vm.min_free_order_shift=4
					sysctl -e -w vm.laptop_mode=0
					sysctl -e -w vm.block_dump=0
					sysctl -e -w vm.oom_dump_tasks=1
					sysctl -e -w vm.oom_kill_allocating_task=0
					sysctl -e -w vm.vfs_cache_pressure=10
					sysctl -e -w vm.overcommit_memory=1
					sysctl -e -w vm.swappiness=20
					sysctl -e -w vm.dirty_writeback_centisecs=2000
					sysctl -e -w vm.dirty_expire_centisecs=1000
					sysctl -e -w kernel.msgmni=$ram
				else
					Logi "Memory Tweaks have been turned off" $RAL
				fi
				#-- Kernel same page merging --#
				if [ $Ra_Merge -eq 1 ]; then
					if [ -d "/sys/kernel/mm/uksm" ]; then ksm=uksm
					elif [ -d "/sys/kernel/mm/ksm" ]; then ksm=ksm
					fi
					if [ -e /sys/kernel/mm/$ksm/run ]; then
					Logi "Enabling kernel same page merging" $RAL
					chmod 644 /sys/kernel/mm/$ksm/*
					echo 1 > /sys/kernel/mm/$ksm/run
					echo 0 > /sys/kernel/mm/$ksm/abundant_threshold
					echo "full" > /sys/kernel/mm/$ksm/cpu_governor
					echo 90 > /sys/kernel/mm/$ksm/max_cpu_percentage
					echo 1536 > /sys/kernel/mm/$ksm/pages_to_scan
					echo 1536 > /sys/kernel/mm/$ksm/scan_batch_pages
					echo 1024 > /sys/kernel/mm/$ksm/sleep_millisecs
				else
					Logi "KSM has been turned off" $RAL
				fi
				PROC_LOCK
				Logi "___________________________________" $RAL
				Logi "Ram Boosted!" $RAL
			fi
		}
		#-- Cleaner --#
		Cleaner_Script () {
			local CLL=/data/The_Thing/Cleaner.log
			rm -f $CLL
			touch $CLL
			#-- Clean useless junk --#
			CL_USELESS () {
				rm -f /data/local/tmp/*.*
				rm -f /data/tombstones/*
				rm -f /data/backup/pending/*
				rm -rf /$IN_SD/LOST.DIR
				rm -rf /$EX_SD/LOST.DIR
				rm -f /data/anr/*.*
			}
			#-- Clean logs --#
			CL_LOGS () {
				rm -f /data/mlog/*
				rm -f /data/log/*.*
				rm -f /dev/log/main/*
				chmod 700 /data/system/usagestats
				rm -f /data/system/usagestats/*
				chmod 700 /data/system/usagestats
			}
			#-- Clean caches --#
			CL_CACHE () {
				rm -f /data/cache/*.*
				rm -f /cache/recovery/*
				sysctl -w vm.drop_caches=3
				sleep 5
				sysctl -w vm.drop_caches=1
				for i in $IN_SD $EX_SD; do
					find $i/*/data/*/cache -iname "*.*" && rm -rf $i
				done
				for i in `find /data/data/*/cache -iname "*.*"`; do
					rm -rf $i
				done
			}
			#-- Clean dropbox --#
			CL_DROPBOX () {
				chmod 700 /data/system/dropbox
				rm -f /data/system/dropbox/*
				chmod 700 /data/system/dropbox
			}
			#-- Clean Advanced --#
			CL_ADVANCED () {
				for i in /data $IN_SD $EX_SD; do
					find $i -iname "UnityAdsVideoCache" && rm -rf $i
				done
				for i in /data $IN_SD $EX_SD; do
					find $i -iname "*.tmp" && rm -f $i
				done
				for i in /data $IN_SD $EX_SD; do
					if [ -z "`find $i -type f`" ]; then rmdir $i; fi
				done
				rm -rf /data/system/recent_images
				rm -rf /data/system/recent_tasks
			}
			if [ -n $1 ]; then
				for i in $@; do
					case $i in
						--USELESS) CL_USELESS;;
						--LOGS) CL_LOGS;;
						--CACHE) CL_CACHE;;
						--DROPBOX) CL_DROPBOX;;
						--ADVANCED) CL_ADVANCED;;
						*) :;;
					esac
				done
			else
				Logi "___________________________________" $CLL
				Logi "Cleaning started: $(date +"%k:%M %m-%d")" $CLL
				Logi "" $CLL
				if [ $Cl_Useless -eq 1 ]; then
					Logi "Cleaning Useless junk" $CLL
					CL_USELESS
				else
					Logi "Useless junk won't be cleaned" $CLL
				fi
				if [ $Cl_Logs -eq 1 ]; then
					Logi "Cleaning Logs" $CLL
					CL_LOGS
				else
					Logi "Logs won't be cleaned" $CLL
				fi
				if [ $Cl_Cache -eq 1 ]; then
					Logi "Cleaning Caches" $CLL
					CL_CACHE
				else
					Logi "Caches won't be cleaned" $CLL
				fi
				if [ $Cl_Dropbox -eq 1 ]; then
					Logi "Cleaning Dropbox" $CLL
					CL_DROPBOX
				else
					Logi "Dropbox won't be cleaned" $CLL
				fi
				if [ $Cl_Advanced -eq 1 ]; then
					Logi "Cleaning Advanced" $CLL
					CL_ADVANCED
				else
					Logi "Advanced junk won't be cleaned" $CLL
				fi
				#-- Clean Additionals --#
				if [ -s /data/The_Thing/Userdata/Cleaner_User_data.txt ]; then
					for CLEAN in `cat /data/The_Thing/Userdata/Cleaner_User_data.txt`; do
						rm -rf $CLEAN
						Logi "Cleaned $CLEAN" $CLL
					done
				else
					Logi "No additional junk to clean" $CLL
				fi
				Logi "___________________________________" $CLL
				Logi "Finished cleaning!" $CLL
			fi
		}
		#-- Smoothie --#
		Smooth_Script () {
			local SML=/data/The_Thing/Smoothie.log
			local sch=/sys/kernel/sched
			local Sched_Features=/sys/kernel/debug/sched_features
			rm -f $SML
			touch $SML
			Logi "___________________________________" $SML
			Logi "Smoothie ran: $(date +"%k:%M %m-%d")" $SML
			#-- UI Smoothing --#
			if [ $Sm_UI -eq 1 ]; then
				Logi "Smoothing UI" $SML
				#-- Optimize flags (Turn them off to improve UI smothness)
				mount -t debugfs none /sys/kernel/debug
				echo "NO_GENTLE_FAIR_SLEEPERS" > $Sched_Features
				echo "NO_NEW_FAIR_SLEEPERS" >> $Sched_Features
				echo "NO_NORMALIZED_SLEEPER" >> $Sched_Features
				echo "NO_ARCH_POWER" >> $Sched_Features
				echo "NO_LB_BIAS" >> $Sched_Features
				echo "NO_NEXT_BUDDY" >> $Sched_Features
				echo "NO_START_DEBIT" >> $Sched_Features
				echo "NO_AFFINE_WAKEUPS" >> $Sched_Features
				echo "NO_LAST_BUDDY" >> $Sched_Features
				echo "NO_CACHE_HOT_BUDDY" >> $Sched_Features
				echo "NO_HRTICK" >> $Sched_Features
				echo "NO_DOUBLE_TICK" >> $Sched_Features
				echo "NO_OWNER_SPIN" >> $Sched_Features
				echo "NO_NONTASK_POWER" >> $Sched_Features
				echo "NO_TTWU_QUEUE" >> $Sched_Features
				echo "NO_FORCE_SD_OVERLAP" >> $Sched_Features
				echo "NO_RT_RUNTIME_SHARE" >> $Sched_Features
				echo "NO_LB_MIN" >> $Sched_Features
				echo "NO_WAKEUP_OVERLAP" >> $Sched_Features
					#WAKEUP_PREEMPT
					#SYNC_WAKEUPS
					#ASYM_GRAN
					#LB_WAKEUP_UPDATE
					#ASYM_EFF_LOAD
				#Better Responsiveness & Speed
				setprop windowsmgr.max_events_per_sec 100
				setprop ro.max.fling_velocity 15000
				setprop ro.min.fling_velocity 8000
				setprop ro.min_pointer_dur 1
				setprop touch.pressure.scale 0.0125
				setprop persist.sys.scrollingcache 3
				setprop persist.service.lgospd.enable 0
				setprop persist.service.pcsync.enable 0
				setprop touch.deviceType touchScreen
				setprop touch.orientationAware 1
				setprop touch.size.calibration area
				setprop touch.size.scale 40
				setprop touch.size.bias 0
				setprop touch.size.isSummed 0
				setprop touch.pressure.calibration amplitude
				setprop touch.orientation.calibration none
			else
				Logi "UI Smoothing has been turned off" $SML
			fi
			#-- Game tweaks
			if [ $Sm_GAME -eq 1 ]; then
				Logi  "Smoothing Games" $SML
				sed -i '/The_Smooth_Graphics/,/The_End_Of_Smooth_Graphics/d' $BuildProp
				cat >> /system/build.prop <<EOF
#-- The_Smooth_Graphics tweaks Made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
hw3d.force=1
hw2d.force=1
debug.performance.tuning=1
video.accelerate.hw=1
debug.sf.hw=1
debug.egl.hw=1
debug.composition.type=gpu
force_hw_ui=true
debug.enabletr=true
debug.overlayui.enable=1
debug.qctwa.preservebuf=1
dev.pm.dyn_samplingrate=1
ro.config.disable.hw_accel=false
ro.fb.mode=1
ro.sf.compbypass.enable=0
ro.vold.umsdirtyratio=20
ro.product.gpu.driver=1
debug.qctwa.statusbar=1
debug.qc.hardware=true
com.qc.hardware=true
persist.sys.composition.type=c2d
persist.sys.ui.hw=1
persist.sys.NV_FPSLIMIT=90
persist.sys.NV_POWERMODE=1
persist.sys.NV_PROFVER=15
persist.sys.NV_STEREOCTRL=0
persist.sys.NV_STEREOSEPCHG=0
persist.sys.NV_STEREOSEP=20
persist.sys.use_16bpp_alpha=1
# The_End_Of_Smooth_Graphics tweaks
EOF
			else
				Logi "Game Smoothing has been turned off" $SML
			fi
			Logi "___________________________________" $SML
			Logi "Done Smoothing!" $SML
		}
	}
	#-- Menus --#
	Menus () {
		#-- Main Menu --#
		Main_Menu () {
			ret=1
			clear
			echo "@@@@@@@@@@"
			echo "@@@¤¤¤¤@@@"
			echo "@@¤####¤@@"
			echo "@¤#&##&#¤@"
			echo "@¤#&##&#¤@"
			echo "@¤#\\##/#¤@"
			echo "@@¤#==#¤@@"
			echo "@@@¤¤¤¤¤@¤"
			echo "@@@@@@¤¤@@"
			echo "@@@@@@@@@@"
			echo -e $divider
			echo "1 | Tim Preferences"
			echo ""
			echo "2 | Settings | Control script settings"
			echo ""
			echo "3 | Additional features Menu"
			echo ""
			echo "4 | Fixer menu"
			echo ""
			echo "X | Exit"
			echo ""
			read choice
			case $choice in
				1)
					until [ $ret -eq 2 ]; do
						Tim_Settings
					done
				;;
				2)
					until [ $ret -eq 2 ]; do
						Settings_Menu
					done
				;;
				3)
					until [ $ret -eq 2 ]; do
						Add_Menu
					done
				;;
				4)
					until [ $ret -eq 2 ]; do
						Fixer_Menu
					done
				;;
				X|x)
					clear
					echo "Good bye!"
					exitm exit
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Main Menu"
					read enterKey
				;;
			esac
			ret=1
		}
		#-- Tim Menu --#
		Tim_Settings () {
			ret=1
			clear
			echo "=====Tim Settings Menu====="
			echo -e $divider
			echo "1 | Control Tim Settings"
			echo ""
			echo "2 | Control profile triggers"
			echo ""
			echo "3 | Control The Default_Profile"
			echo ""
			echo "X | Back to Main Menu"
			echo ""
			read choice
			case $choice in
			1)
				until [ $ret -eq 2 ]; do
					Tim_Preferences
				done
			;;
			2)
				until [ $ret -eq 2 ]; do
					echo ""
					echo "Do you want to [I]nclude or [E]xclude apps?"
					echo ""
					read choice
					case $choice in
					E|e)
						MODE=Excluder
					;;
					*)
						MODE=Includer
					;;
					esac
					clear
					echo "Choose a profile:"
					echo ""
					echo "1 | Multitasking_Profile"
					echo ""
					echo "2 | Performance_Profile"
					echo ""
					echo "3 | Internet_Profile"
					echo ""
					echo "4 | Gaming_Profile"
					echo ""
					echo "5 | Music_Profile"
					echo ""
					echo "X | Back to Tim Settings Menu"
					echo ""
					read choice
					case $choice in
					1)
						SWITCH="allow"
						until [ $ret -eq 2 ]; do
							App_$MODE Multitasking_triggers.txt
						done
						ret=1
					;;
					2)
						SWITCH="allow"
						until [ $ret -eq 2 ]; do
							App_$MODE Performance_triggers.txt
						done
						ret=1
					;;
					3)
						SWITCH="allow"
						until [ $ret -eq 2 ]; do
							App_$MODE Internet_triggers.txt
						done
						ret=1
					;;
					4)
						SWITCH="allow"
						until [ $ret -eq 2 ]; do
							App_$MODE Gaming_triggers.txt
						done
						ret=1
					;;
					5)
						SWITCH="allow"
						until [ $ret -eq 2 ]; do
							App_$MODE Music_triggers.txt
						done
						ret=1
					;;
					X|x)
						ret=2
					;;
					*)
						echo "ERROR: Not a valid option, choose again"
						echo "Press enter to return to Main Menu"
						read enterKey
					;;
					esac
				done
			;;
			3)
				until [ $ret -eq 2 ]; do
					ProfileMgr
				done
			;;
			X|x)
				ret=2
			;;
			*)
				echo "ERROR: Not a valid option, choose again"
				echo "Press enter to return to Main Menu"
				read enterKey
			;;
			esac
		}
		#-- Tim Preferences --#
		Tim_Preferences () {
			Set_Ings
			clear
			echo "====Timmy Control===="
			echo -e $divider
			echo -e "1 | Device sleep hours\tFrom: $SleepStartTime:00 to $SleepEndTime:00"
			echo ""
			echo -e "2 | Tim loop interval:\t$Tim_Interval"
			echo ""
			echo -e "3 | Low battery threshold:\t$LowBatteryTrigger %"
			echo ""
			echo -en "4 | Allow Automatic reboot after battery calibration" ; if [ $AllowAutoReboot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi
			echo ""
			echo -en "5 | Allow Notification sounds" ; if [ $AllowNotificationTune -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi
			echo ""
			echo "X | Back to Tim Settings Menu"
			echo ""
			read choice
			echo ""
			case $choice in
			1)
				echo "These numbers are in military format"
				echo "Please provide full numbers"
				echo -n "Sleep start point:"; read choice
				if [ $choice -lt 10 ]; then SleepStartTime=0$choice; else SleepStartTime=$choice; fi
				echo -n "Sleep end point:"; read choice
				if [ $choice -lt 10 ]; then SleepEndTime=0$choice; else SleepEndTime=$choice; fi
			;;
			2)
				echo "This number is in seconds"
				echo "Please provide full numbers"
				echo -n "Tim loop interval:"; read choice
				Tim_Interval=$choice						
			;;
			3)
				echo "The low battery threshold is messured in procents"
				echo "Please provide full numbers"
				echo -n "Low battery threshold:"; read choice
				LowBatteryTrigger=$choice
			;;
			4) if [ $AllowAutoReboot -eq 1 ]; then AllowAutoReboot=0; else AllowAutoReboot=1; fi;;
			5) if [ $AllowNotificationTune -eq 1 ]; then AllowNotificationTune=0; else AllowNotificationTune=1; fi;;
			X|x)
				echo -e $divider
				echo "Press enter to return to Tim Menu"
				read enterKey
				ret=2
			;;
			*)
				echo "ERROR: Not a valid option, choose again"
				echo "Press enter to return to Smooth Menu"
				read enterKey
			;;
			esac
			Up_Ings
		}
		#-- Settings Menu --#
		Settings_Menu () {
			ret=1
			clear
			echo "=======Settings Menu======="
			echo -e $divider
			echo "1 | Smoothie script options"
			echo ""
			echo "2 | Cleaner script options"
			echo ""
			echo "3 | Ram_Booster options"
			echo ""
			echo "4 | Tweak_Engine options"
			echo ""
			echo "5 | Fstrim script options"
			echo ""
			echo "6 | App_Optimizer options"
			echo ""
			echo "7 | Killer script options"
			echo ""
			echo "X | Back to Main Menu"
			echo ""
			read choice
			case $choice in
				1)
					until [ $ret -eq 2 ]; do
						Smooth_Menu
					done
					ret=1
				;;
				2)
					until [ $ret -eq 2 ]; do
						Cleaner_Menu
					done
					ret=1
				;;
				3)
					until [ $ret -eq 2 ]; do
						Ram_Menu
					done
					ret=1
				;;
				4)
					until [ $ret -eq 2 ]; do
						Tweak_Menu
					done
					ret=1
				;;
				5)
					until [ $ret -eq 2 ]; do
						Fstrim_Menu
					done
					ret=1
				;;
				6)
					until [ $ret -eq 2 ]; do
						Optimizer_Menu
					done
					ret=1
				;;
				7)
					until [ $ret -eq 2 ]; do
						Killer_Menu
					done
					ret=1
				;;
				X|x)
					echo "Press enter to return to Main Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=1
				;;
			esac
		}
		#-- Smoothie --#
		Smooth_Menu () {
			Set_Ings
			ret=1
			clear
			echo "=======Smoothie Control======="
			echo -e $divider
			echo -en "1 | UI Smoothing\t"; if [ $Sm_UI -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi
			echo ""
			echo -en "2 | GAME Smoothing\t"; if [ $Sm_GAME -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi
			echo ""
			echo -en "3 | Script run on boot\t"; if [ $Sm_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Sm_UI -eq 1 ]; then Sm_UI=0; else Sm_UI=1; fi;;
				2) if [ $Sm_GAME -eq 1 ]; then Sm_GAME=0; else Sm_GAME=1; fi;;
				3) if [ $Sm_Boot -eq 1 ]; then Sm_Boot=0; else Sm_Boot=1; fi;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Smooth Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Cleaner --#	
		Cleaner_Menu () {
			Set_Ings
			ret=1
			clear
			echo "=======Cleaner Control======="
			echo -e $divider
			echo -en "1 | Useless junk cleaning\t"; if [ $Cl_Useless -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "2 | Log cleaning\t"; if [ $Cl_Logs -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "3 | Cache cleaning\t"; if [ $Cl_Cache -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "4 | System Dropbox cleaning\t"; if [ $Cl_Dropbox -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "5 | Advanced cleaning\t"; if [ $Cl_Advanced -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -e "6 | Cleaning interval: \t $Cl_Interval"
			echo ""
			echo -en "7 | Script run on boot\t"; if [ $Cl_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -e $divider
			echo "=======Additional junk======="
			echo ""
			echo "A | Add new Junk to Clean List"
			echo ""
			echo "R | Remove Junk from Clean List"
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Cl_Useless -eq 1 ]; then Cl_Useless=0; else Cl_Useless=1; fi;;
				2) if [ $Cl_Logs -eq 1 ]; then Cl_Logs=0; else Cl_Logs=1; fi;;
				3) if [ $Cl_Cache -eq 1 ]; then Cl_Cache=0; else Cl_Cache=1; fi;;
				4) if [ $Cl_Dropbox -eq 1 ]; then Cl_Dropbox=0; else Cl_Dropbox=1; fi;;
				5) if [ $Cl_Advanced -eq 1 ]; then Cl_Advanced=0; else Cl_Advanced=1; fi;;
				7) if [ $Cl_Boot -eq 1 ]; then Cl_Boot=0; else Cl_Boot=1; fi;;
				6)
					Change_Interval Cleaner $(($Cl_Interval/3600)) hours
					ret=$?
					Cl_Interval=$(($ret*3600))
					ret=1
				;;
				A|a)
					until [ $input = "exit" ]; do
						clear
						echo ""
						echo "Type the Junk path you want included"
						echo "Type exit to exit"
						echo ""
						read input
						if [ $input = "exit" ]; then input=exit;
						else
							echo $input >> /data/The_Thing/Userdata/Cleaner_User_data.txt
							echo "Junk $input added"
						fi
					done
				;;
				R|r)
					until [ $ret -eq 2 ]; do
						App_Excluder Cleaner_User_data.txt Junk
					done
					ret=1
				;;
				X|x)
					echo  -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Cleaner Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Ram Booster --#
		Ram_Menu () {
			Set_Ings
			ret=1
			clear
			echo "=======Ram Booster Control======="
			echo -e $divider
			echo -en "1 | Toggle Memory tweaks\t"; if [ $Ra_Memory -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "2 | Toggle Kernel Same Page Merging\t"; if [ $Ra_Merge -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "3 | Toggle run on boot\t"; if [ $Ra_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -e $divider
			echo "=======Memory Lock======="
			echo "A | Add new processes to Lock List"
			echo ""
			echo "R | Remove Processes from Lock List"
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Ra_Memory -eq 1 ]; then Ra_Memory=0; else Ra_Memory=1; fi;;
				2) if [ $Ra_Merge -eq 1 ]; then Ra_Merge=0; else Ra_Merge=1; fi;;
				3) if [ $Ra_Boot -eq 1 ]; then Ra_Boot=0; else Ra_Boot=1; fi;;
				A|a)
					SWITCH="disallow"
					until [ $ret -eq 2 ]; do
						App_Includer Ram_Lock_data.txt
					done
					ret=1
				;;
				R|r)
					until [ $ret -eq 2 ]; do
						App_Excluder Ram_Lock_data.txt App
					done
					ret=1
				;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Ram Booster Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Tweak Engine --#
		Tweak_Menu () {
			Set_Ings
			ret=1
			clear
			echo "=======Tweak Engine Control======="
			echo -e $divider
			echo -en "1 | Internet tweaks\t"; if [ $Tw_Net -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "2 | Battery tweaks\t"; if [ $Tw_Battery -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "3 | Kernel tweaks\t"; if [ $Tw_Kernel -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "4 | IO tweaks\t"; if [ $Tw_IO -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "5 | Loging tweaks\t"; if [ $Tw_LogEr -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "6 | Audio tweaks\t"; if [ $Tw_Audio -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "7 | Camera tweaks\t"; if [ $Tw_Camera -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "8 | Tiwlan WiFi tweaks\t"; if [ $Tw_Tiwlan -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "9 | Script run on boot\t"; if [ $Tw_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Tw_Net -eq 1 ]; then Tw_Net=0; else Tw_Net=1; fi;;
				2) if [ $Tw_Battery -eq 1 ]; then Tw_Battery=0; else Tw_Battery=1; fi;;
				3) if [ $Tw_Kernel -eq 1 ]; then Tw_Kernel=0; else Tw_Kernel=1; fi;;
				4) if [ $Tw_IO -eq 1 ]; then Tw_IO=0; else Tw_IO=1; fi;;
				5) if [ $Tw_LogEr -eq 1 ]; then Tw_LogEr=0; else Tw_LogEr=1; fi;;
				6) if [ $Tw_Audio -eq 1 ]; then Tw_Audio=0; else Tw_Audio=1; fi;;
				7) if [ $Tw_Camera -eq 1 ]; then Tw_Camera=0; else Tw_Camera=1; fi;;
				8) if [ $Tw_Tiwlan -eq 1 ]; then Tw_Tiwlan=0; else Tw_Tiwlan=1; fi;;
				9) if [ $Tw_Boot -eq 1 ]; then Tw_Boot=0; else Tw_Boot=1; fi;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Tweak Engine Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Fstrim --#		
		Fstrim_Menu () {
			Set_Ings
			clear
			echo "=======Fstrim Control======="
			echo -e $divider
			echo -en "1 | /cache Trimming\t"; if [ $Fs_Cache -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "2 | /data Trimming\t"; if [ $Fs_Data -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "3 | /system Trimming\t"; if [ $Fs_System -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "4 | /preload Trimming\t"; if [ $Fs_Preload -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -e "5 | Trimming interval: \t $Fs_Interval"
			echo ""
			echo -en "6 | Script run on boot\t"; if [ $Fs_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Fs_Cache -eq 1 ]; then Fs_Cache=0; else Fs_Cache=1; fi;;
				2) if [ $Fs_Data -eq 1 ]; then Fs_Data=0; else Fs_Data=1; fi;;
				3) if [ $Fs_System -eq 1 ]; then Fs_System=0; else Fs_System=1; fi;;
				4) if [ $Fs_Preload -eq 1 ]; then Fs_Preload=0; else Fs_Preload=1; fi;;
				6) if [ $Fs_Boot -eq 1 ]; then Fs_Boot=0; else Fs_Boot=1; fi;;
				5)
					Change_Interval Fstrim $(($Fs_Interval/86400)) days
					ret=$?
					Fs_Interval=$(($ret*86400))
					ret=1
				;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Fstrim Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Optimizer (Zipaligner & SQLite Optimizer & App premission fixer) --#
		Optimizer_Menu () {
			Set_Ings
			clear
			echo "=======Optimizer Control======="
			echo -e $divider
			echo -en "1 | /data Optimization\t"; if [ $Op_Data -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "2 | /system Optimization\t"; if [ $Op_System -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -en "3 | SQLite Optimization\t"; if [ $Op_Sqlite -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo -e "4 | Optimization interval: \t $Op_Interval"
			echo ""
			echo -en "5 | Script run on boot\t"; if [ $Op_Boot -eq 1; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1) if [ $Op_Data -eq 1 ]; then Op_Data=0; else Op_Data=1; fi;;
				2) if [ $Op_System -eq 1 ]; then Op_System=0; else Op_System=1; fi;;
				3) if [ $Op_Sqlite -eq 1 ]; then Op_Sqlite=0; else Op_Sqlite=1; fi;;
				5) if [ $Op_Boot -eq 1 ]; then Op_Boot=0; else Op_Boot=1; fi;;
				4)
					Change_Interval App_Optimizer $(($Op_Interval/86400)) days
					ret=$?
					Op_Interval=$(($ret*86400))
					ret=1
				;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Settings Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Zipalign Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Killer --#
		Killer_Menu () {
			Set_Ings
			clear
			echo "======Killer Menu======="
			echo -e $divider
			echo "1 | Add new processes to Kill List"
			echo ""
			echo "2 | Remove Processes from Kill List"
			echo ""
			echo -e "3 | Killer run interval: \t $Ki_Interval"
			echo ""
			echo -en "4 | Script run on boot\t"; if [ $Ki_Boot -eq 1 ]; then echo -e $ON; else echo -e $OFF; fi;
			echo ""
			echo "X | Back to Settings Menu"
			echo ""
			read choice
			case $choice in
				1)
					SWITCH="disallow"
					until [ $ret -eq 2 ]; do
						App_Includer Killer_data.txt
					done
					ret=1
				;;
				2)
					until [ $ret -eq 2 ]; do
						App_Excluder Killer_data.txt App
					done
					ret=1
				;;
				3)
					Change_Interval Killer $(($Ki_Interval/3600)) hours
					ret=$?
					Ki_Interval=$(($ret*3600))
					ret=1
				;;
				4) if [ $Ki_Boot -eq 1 ]; then Ki_Boot=0; else Ki_Boot=1; fi;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Additional Features Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Killer Menu"
					read enterKey
				;;
			esac
			Up_Ings
		}
		#-- Additional Menu --#
		Add_Menu () {
			clear
			echo "=======Additional Options======="
			echo -e $divider
			echo "1 | Control Swap and Zram"
			echo ""
			echo "2 | Control the Malware and Ad Blocker"
			echo ""
			echo "3 | Enable and disable script options in batches"
			echo ""
			echo "4 | Reboot & Clean"
			echo ""
			echo "X | Return to Main Menu"
			echo ""
			read choice
			case $choice in
				1)
					SwaPa
				;;
				2)
					until [ $ret -eq 2 ]; do
						Block
					done
				;;
				3)
					until [ $ret -eq 2 ]; do
						Batch
					done
				;;
				4)
					echo "If only this script closes, please reboot manually"
					sleep 2
					echo "Rebooting..."
					rm -f /data/dalvik-cahce/*
					rm -f /data/cache/*.*
					echo "BOOF!"
					exitm reboot
				;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Additional Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Additional Menu"
					read enterKey
				;;
			esac
			ret=1
		}
		#-- SwaPa menu --#
		SwaPa (){
			echo "=======Additional Options======="
			echo -e $divider
			echo "1 | Enable Swap"
			echo ""
			echo "2 | Enable Zram"
			echo ""
			echo "3 | Remove Swap / Zram"
			echo ""
			read choice
			case $choice in
				1) MakeSwap swap;;
				2) MakeSwap zram;;
				3)
					mount -o remount,rw /system
					mount -o remount,rw /cache
					rm -rf /system/swap.file
					swapoff -a
					rm -fr /cache/swap
					rm -fr /data/property/swapfile-run
					swapoff /dev/block/zram0
				;;
			esac
			echo "Done!"
			sleep 3
		}
		#-- AdBlock control --#	
		Block () {
			ret=1
			clear
			echo "=======Malware- and Ad-Blocker======="
			echo -e $divider
			echo "1 | Install the Blocker"
			echo ""
			echo "2 | Uninstall the Blocker"
			echo ""
			echo "X | Return to Additional Menu"
			echo ""
			read choice
			case $choice in
				1)
					echo "Installing the Full Blocker"
					cp /data/The_Thing/AdBlock/hosts_full /system/etc/hosts
					chmod -f 644 /system/etc/hosts
					echo "Done!"
					sleep 2
				;;
				2)
					echo "Removing the Blocker"
					cp /data/The_Thing/AdBlock/hosts_original /system/etc/hosts
					chmod -f 644 /system/etc/hosts
					sleep 2
				;;
				X|x)
					echo "Press enter to return to Additional Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Blocker Menu"
					read enterKey
				;;
			esac
		}
		#-- Batch install menu --#	
		Batch ( ) {
			ret=1
			clear
			echo "Batch Enabler"
			echo -e $divider
			echo "1 | Enable All MOD options"
			echo ""
			echo "2 | Disable All MOD options"
			echo ""
			echo "3 | Run All scripts on boot"
			echo ""
			echo "4 | Run No scripts on boot"
			echo ""
			echo "X | Return to Additional Menu" 
			echo ""
			read choice
			case $choice in
				1)
					echo "Enabling All Otions.."
					echo "Smooth script"
					Sm_UI=1
					Sm_GAME=1
					echo "Cleaner script"
					Cl_Useless=1
					Cl_Logs=1
					Cl_Anr=1
					Cl_Cache=1
					Cl_Dropbox=1
					Cl_Usagestats=1
					echo "Ram Booster script"
					Ra_Memory=1
					Ra_Merge=1
					echo "Tweak Engine script"
					Tw_Net=1 
					Tw_Battery=1
					Tw_Kernel=1
					Tw_IO=1
					Tw_LogEr=1
					Tw_Audio=1
					Tw_Camera=1
					echo "Fstrim script"
					Fs_Cache=1
					Fs_Data=1
					Fs_System=1
					Fs_Preload=1
					echo "App Optimizer script"
					Op_Data=1
					Op_System=1
					Op_Sqlite=1
					echo "Updating the settings"
					Up_Ings
					echo "Done!"
					echo "Press enter to return to Batch Menu"
					read enterKey
				;;
				2)
					echo "Disabling All Otions.."
					echo "Smooth script"
					Sm_UI=0
					Sm_GAME=0
					echo "Cleaner script"
					Cl_Useless=0
					Cl_Logs=0
					Cl_Anr=0
					Cl_Cache=0
					Cl_Dropbox=0
					Cl_Usagestats=0
					echo "Ram Booster script"
					Ra_Memory=0
					Ra_Merge=0
					echo "Tweak Engine script"
					Tw_Net=0 
					Tw_Battery=0
					Tw_Kernel=0
					Tw_IO=0
					Tw_LogEr=0
					Tw_Audio=0
					Tw_Camera=0
					echo "Fstrim script"
					Fs_Cache=0
					Fs_Data=0
					Fs_System=0
					Fs_Preload=0
					echo "App Optimizer script"
					Op_Data=0
					Op_System=0
					Op_Sqlite=0
					echo "Updating the settings"
					Up_Ings
					echo "Done!"
					echo "Press enter to return to Batch Menu"
					read enterKey
				;;
				3)
					echo "\"Now all scripts shall run on BOOT!\""
					Sm_Boot=1
					Cl_Boot=1
					Ra_Boot=1
					Tw_Boot=1
					Fs_Boot=1
					Op_Boot=1
					Ki_Boot=1
					Up_Ings
					echo "Done!"
					echo "Press enter to return to Batch Menu"
					read enterKey
				;;
				4)
					echo "\"You shall not BOOT!\""
					Sm_Boot=0
					Cl_Boot=0
					Ra_Boot=0
					Tw_Boot=0
					Fs_Boot=0
					Op_Boot=0
					Ki_Boot=0
					Up_Ings
					echo "Done!"
					echo "Press enter to return to Batch Menu"
					read enterKey
				;;
				X|x)
					echo -e $divider
					echo "Press enter to return to Additional Menu"
					read enterKey
					ret=2
				;;
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Batch Menu"
					read enterKey
				;;
			esac
		}
		#-- Fixer menu --#
		Fixer_Menu () {
			clear
			echo "=======Fixer Menu======="
			echo ""
			echo "1 | Run Fixer: Recalibrate proximity sensor, apply a possible WiFi fix and delete useless toolboxes"
			echo ""
			echo "2 | Recreate a optimized Tiwlan.ini"
			echo ""
			echo "3 | Enable init.d support"
			echo ""
			echo "4 | Manage Backups"
			echo ""
			echo "4 | Uninstall this mod"
			echo ""
			echo "X | Exit"
			echo ""
			read choice
			case $choice in
				1)
					echo ""
					echo "Are you sure? Your phone will reboot after the fixing process"
					echo ""
					echo "[Y/N]"
					read choice
					case $choice in
						y|Y)
							echo "Recalibrating the Proximity sensor"
							echo 0 > /sys/class/sensors/proximity_sensor/prox_cal
							echo 1 > /sys/class/sensors/proximity_sensor/prox_cal
							echo "Done!"
							echo "Fixing WiFi"
							chown 1000.1010 /d*/misc/wifi/wpa_supplicant.conf
							chmod 660 /d*/misc/wifi/wpa_supplicant.conf
							echo "Deleting useless toolboxes"
							rm -f /system/bin/toolbox
							echo "If only this script closes, please reboot manually"
							echo "Rebooting..."
							echo "BOOF!"
							exitm reboot
						;;
						*)
							echo "Press Enter to return to Fixer menu"
							read EnterKey
						;;
					esac
				;;
				2)
					Create_Tiwlan
				;;
				3)
					if [ -z "`cat /system/bin/sysinit | grep "init.d"`" ]; then
						echo "Creating Init.d Simulator"
						crt_sysinit
					else
						echo "You should already have init.d support"
						echo "Do you want to enable it anyway? [Y/N]"
						echo "This will delete /system/bin/sysinit and recreate it"
						read choice
						case $choice in
							y|Y)
								echo "Recreating"
								rm -f /system/bin/sysinit
								crt_sysinit
							;;
							*)
								echo "Okay, continuing with install"
							;;
					fi
					echo "Setting permissions for sysinit"
					chmod 755 /system/bin/sysinit
					chown 0.2000 /system/bin/sysinit
					if [ -e /system/etc/install-recovery ]; then
						if [ -z "`cat /system/etc/install-recovery.sh | grep "daemon"`" ]; then
							echo "Running sysinit on boot"
							crt_recovery_start
							crt_recovery_end
						else
							echo "Superuser is already using install-recovery.sh"
							echo "Writing into install-recovery-2.sh instead"
							sed -i '/Start_Of_Initsim/,/End_Of_Initsim/d' /system/etc/install-recovery-2.sh
							cat > /system/etc/install-recovery-2.sh <<"EOF"
#!/system/bin/sh
#Start_Of_Initsim
#Made by _Bon_Bon(XDA)
#Copyright (C) 2015 Francisco Pulido Garces (_Bon_Bon)
#see <http://www.gnu.org/licenses/>
#The_inti.d_Simulator made by --BonBon--
#
#DO NOT DELETE COMMENTS! IT WOULD BREAK UNINSTALL PROCESS
#
#Run init.d scripts
/system/bin/sysinit
EOF
						fi
					else
						echo "Running sysinit on boot"
						crt_recovery_start
						crt_recovery_end
					fi
					echo "Setting permissions for install-recovery.sh"
					echo "Also for install-recovery-2.sh if it exists"
					chmod 755 /system/etc/install-recovery.sh
					chown 0.0 /system/etc/install-recovery.sh
					if [ -e /system/etc/install-recovery-2.sh ]; then
						chmod 755 /system/etc/install-recovery-2.sh
						chown 0.0 /system/etc/install-recovery-2.sh
					fi
					echo "Checking if init.d folder exists"
					if [ -d /system/etc/init.d ]; then
						echo "init.d folder found!"
					else 
						echo "init.d folder wasn't found, creating it"
						mkdir /system/etc/init.d
					fi
					echo "Done!"
					echo "Enjoy!"
				;;
				4)
					until [ $ret -eq 2 ]; do
						BackMgr_Menu
					done
				;;
				5)
					clear
					echo -e $divider
					echo "Really? Uninstall everythig? [Y/N]"
					read choice
					if [ $choice = "Y" ]; then
						echo "Fine, be like that :P I'm GONE! And so are the tweaks!"
						cp -f /data/The_Thing/AdBlock/hosts_original /system/etc/hosts
						chmod -f 644 /system/etc/hosts
						rm -fr /data/The_Thing
						rm -f /system/bin/Tim
						rm -f /system/xbin/zipalign
						rm -f /system/xbin/sqlite3
						sed -i '/The_Internet/,/The_End_Of_Internet/d' $BuildProp
						sed -i '/The_Battery/,/The_End_Of_Battery/d' $BuildProp
						sed -i '/The_LogEr/,/The_End_Of_LogEr/d' $BuildProp
						sed -i '/The_Audio/,/The_End_Of_Audio/d' $BuildProp
						sed -i '/The_Camera/,/The_End_Of_Camera/d' $BuildProp
						sed -i '/The_Smooth_Graphics/,/The_End_Of_Smooth_Graphics/d' $BuildProp
						echo "By..."
						rm -f /system/bin/The_Thing
						exitm exit
					else
						echo "Fhew! You almost had me there! :D"
						echo "Press enter to return to Fixer Menu"
						read enterKey
					fi
				;;
				X|x)
					echo "Press Enter to return to Fixer Menu"
					read EnterKey
					ret=2
				;;
			esac
		}
		#-- Backup Manager Menu --#
		BackMgr_Menu () {
			ret=1
			clear
			echo "=======Backup Manager======="
			echo ""
			echo "1 | Manage Google Bloatware backups"
			echo ""
			echo "2 | Manage General Bloatware bcakups"
			echo ""
			echo "X | Return to Fixer Menu"
			echo ""
			read choice
			case $choice in
				1)
					until [ $ret -eq 2 ]; do
						BackMgr GOOGLE
					done
					ret=1
				;;
				2)
					until [ $ret -eq 2 ]; do
						BackMgr GENERAL
					done
					ret=1
				;;
				X|x)
					echo "Press Enter to return to Fixer Menu"
					read EnterKey
					ret=2
				;; 
				*)
					echo "ERROR: Not a valid option, choose again"
					echo "Press enter to return to Fixer Menu"
					read enterKey
				;;
			esac
		}
		#-- Creates Optimized Tiwlan.ini file --#
		Create_Tiwlan () {
			echo "Creating Tiwlan.ini..."
			cat > /system/etc/wifi/tiwlan.ini <<EOF
# Note: The letters in this file are NOT case sensitive.

# dot11BeaconPeriod = 100
# ConnSelfTimeout = 60000

SmeConnectMode = 1               #0 - auto, 1 - manual
ScanResultAging = 0              # in Second - range 0..1000
WME_Enable = 1                   #0=diable WME support / 1=Enable
dot11NetworkType = 3             #2 - A only mode, 3 - B/G mode, 4 - A/G Dual mode
SmeScanGChannelList = 1,2,3,4,5,6,7,8,9,10,11,12,13,14
SmeScanAChannelList = 36,40,44,48,52,56,60,64
RecoveryEnable = 1               #0 -Disabled 1- Enabled
BThWlanCoexistEnable = 1         #0 - SG disable, 1 - SG protective
TxAggregationPktsLimit = 0       # Disable Tx packets aggregation for Linux (degrades TP)

#
# Power Manager
#
BeaconListenInterval = 1        # the number of N-Beacon or N-DTim
DtimListenInterval = 1          #

ReAuthActivePriority = 0

dot11PowerMode = 0              #0 - Auto
                                #1 - Active
                                #2 - Short Doze
                                #3 - Long Doze

PowerMgmtHangOverPeriod = 10    #in mSec units

AutoPowerModeDozeMode = 3       #2 - Short Doze
                                #3 - Long Doze

AutoPowerModeActiveTh = 2       #packets per second

AutoPowerModeDozeTh = 8         #packets per seconds - threshold for entering ELP in Auto mode

defaultPowerLevel = 0   #0 - ELP
                        #1 - PD
                        #2 - AWAKE

PowerSavePowerLevel = 0 #0 - ELP
                        #1 - PD
                        #2 - AWAKE

DcoItrimEnabled = 0  # 0 - Disabled  1 - Enabled
DcoItrimModerationTimeout = 50000

TxPower = 205           #set Default Tx Power Level in DBM * 10
dot11FragmentationThreshold = 4096
dot11RTSThreshold = 4096
WPAMixedMode= 1
RSNPreAuthentication = 1

CalibrationChannel24 = 7
# CalibrationChannel24 = 1
CalibrationChannel5 = 36

# Regulatury Domain tables.
# Each byte correlates to one channel in sequential order.  Table 2.4 starts from channel 1, Table 5.0 starts from channel 36.
# Bits 0..4 - Max power allowed in Dbm.
# Bit 6 - Channel is allowed for Active scan
# BIt 7 - Channel is allowed
AllowedChannelsTable24 = FFFFFFFFFFFFFFFFFFFFFFFFFFFF
AllowedChannelsTable5 = FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000000000000000000000000000000000000000000000000000000000000000000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000000000000000FF000000FF000000FF000000FF000000FF000000000000000000000000000000

SpectrumManagement = 0          # 0 - Disable 802.11h, 1 - Enable

RxBroadcastInPs = 1

#arp ip filter - must be written 8 characters for example 10.2.43.3 -> 0a 02 2b 21 and not a 2 2b 21
ArpIp_Addr = 0a 02 0a b7
ArpIp_Filter_ena = 0


#mac filter
Mac_Filter_Enabled = 0
numGroupAddrs = 4
Group_addr0 = 10 01 02 03 04 05
Group_addr1 = 11 11 12 13 14 15
Group_addr2 = 12 21 22 23 24 25
Group_addr3 = 13 31 32 33 34 35
Group_addr4 = 14 41 42 43 44 45
Group_addr5 = 15 51 52 53 54 55
Group_addr6 = 16 61 62 63 64 65
Group_addr7 = 17 71 72 73 74 75

#beacon filter
Beacon_Filter_Desired_State = 1
Beacon_Filter_Stored = 1

#beacon IE table
#the size is the len of the string - spaces = number of bytes
Beacon_IE_Num_Of_Elem = 16
Beacon_IE_Table_Size = 37
Beacon_IE_Table = 00 01 01 01 32 01 2a 01 03 01 06 01 07 01 20 01 25 01 23 01 30 01 28 01 2e 01 3d 01 85 01 dd 01 00 52 f2 02 00 01

# rate policy - short / long retries
RatePolicyUserShortRetryLimit   = 10
RatePolicyUserLongRetryLimit    = 10

#rate policies
#rates guide: -->>mcs7,msc6,mcs5,mcs4,mcs3,mcs2,mcs1,mcs0,54,58,36,24,22,18,12,11,9,6,5.5,2,1


OsDbgState = 0x01e9003c         # -1 or 0xffffffff -all (opens debug messages in o.s. only - sevirity+modules)

#############################################################
#   Configure the severity table (0 = Disable/ 1 = Enable)
#
#   Byte #0: Init
#   Byte #1: Information
#   Byte #2: Warning
#   Byte #3: Error
#   Byte #4: Fatal Error
#   Byte #5: SM
#   Byte #6: Console
#############################################################

# LAUNCH Logging Mask
ReportSeverityTable = 0000000
# Default Logging Mask
# ReportSeverityTable = 0001101

BeaconReceiveTime = 50

#
# QOS UPSD
#

desiredPsMode       = 1          # Global Power save delivery protocol (1 - UPSD, 0 - Legacy)
QOS_wmePsModeBE     = 0          # Power save delivery protocol for BE AC (1 - UPSD, 0 - Legacy)
QOS_wmePsModeBK     = 0          # Power save delivery protocol for BK AC (1 - UPSD, 0 - Legacy)
QOS_wmePsModeVI     = 0          # Power save delivery protocol for VI AC (1 - UPSD, 0 - Legacy)
QOS_wmePsModeVO     = 1          # Power save delivery protocol for VO AC (1 - UPSD, 0 - Legacy)

#
# QOS Classifier
#
Clsfr_Type = 1                  # 1 - DSCP, 2 - Port, 3 - IP+port


NumOfCodePoints = 4
DSCPClassifier00_CodePoint = 0                #Best Effort
DSCPClassifier00_DTag = 0

DSCPClassifier01_CodePoint = 8                #Background
DSCPClassifier01_DTag = 1

DSCPClassifier02_CodePoint = 40               #Video
DSCPClassifier02_DTag = 5

DSCPClassifier03_CodePoint = 56               #Voice
DSCPClassifier03_DTag = 6

dot11MaxReceiveLifetime=512000

WiFiAdhoc = 1
WiFiWmmPS = 0	# Use 1 on WiFi test in order to configure PS to work in WMM mode

TriggeredScanTimeOut = 50000 # Maximum time in Us between 2 channels on triggered scan
# PsPoll delivery failure solution
PsPollDeliveryFailureRecoveryPeriod = 20		# Time in Ms to stay ACTIVE ('0' to disable feature)
ConsecutivePsPollDeliveryFailureThreshold = 4   # Number of failed PsPoll's to start ACTIVE time out


# Weights in percent for RSSI/SNR Average calculations
RssiBeaconAverageWeight = 20
RssiPacketAverageWeight = 10
SnrBeaconAverageWeight = 20
SnrPacketAverageWeight = 10

HT_Enable=1                     # 0 = disable 802.11n support / 1=Enable
IbssProtectionType = 1          # 0 = CTS protaction disable ; 1 = Standard CTS protaction
BurstModeEnable = 1             # 0 - Disabled  1 - Enabled
RoamScanEnable = 1              # 1- roaming and immidate scan enable by deafult 0- allowing roaming & scannig due to CLI confguration
RoamingOperationalMode = 1      # 0=Manual , 1=Auto

SendTspecInReassPkt = 0 # 0=do not send, 1=send

FmCoexuSwallowPeriod = 5
FmCoexuNDividerFrefSet2 = 12
FmCoexuMDividerFrefSet2 = 148

BaPolicyTid_0 = 3

##############################################################################################################################
################################################## Radio parameters data - Start #############################################
##############################################################################################################################

################################ General parameters ################################
STRFRefClock = 9                # Unit: Options 5'bXX000 : Bit 0,1,2 - (0: 19.2MHz; 1: 26MHz; 2: 38.4MHz  (Default); 3: 52MHz;  4: 38.4MHz XTAL) ;
                                # 5'bX0XXX : Bit 3 - CLK_REQ type;  0 = wired-OR (Default) , 1= push-pull
                                # 5'b0XXXX : Bit 4 - CLK_REQ polarity; 0 = Normal (Default) , 1=Inverted, Format: Unsigned, Source: Customer
STRFRefClockSettingTime = 5
TXBiPFEMAutoDetect = 0          # Unit: Options (0: Manual Mode; 1: Automatic mode), Format: Unsigned, Source: Customer
TXBiPFEMManufacturer = 1        # Unit: Options (0: RFMD; 1: Triquint), Format: Unsigned, Source: Customer
ClockValidOnWakeup = 0
DC2DCMode = 0                   # Unit: Options (0: btSPI is not used; 1: mux DC2DC mode to BT_FUNC2), Format: Unsigned, Source: Customer
Single_Dual_Band_Solution = 1   # Unit: Options (0: Single band. 2.4GHz only; 1: Dual band = 2.4GHz and 5GHz solution), Format: Unsigned, Source: Customer
# SEMC_BEGIN (DMS00718059 New inifile for W-LN/BT for AP1 build w.50)
Settings  = 65                  #  0x41 Unit: Options (Bit0: NBI (0: Off; 1: On), Bit1: Telec channel 14 (0: Off; 1: On), Format: Unsigned, Source: Customer
                                # Bit2: FEM0-LB, Bit3: FEM0-HB, Bit4: FEM1-LB, Bit5: FEM1-HB - TX BiP load (0: Internal; 1: External),
                                # Bit6: LPD Low band, Bit7: LPD High band
# SEMC_END (DMS00718059 New inifile for W-LN/BT for AP1 build w.50)

# Smart Reflex params
SRState = 1                                 # Unit: Options ( 1 - Enabled   ?0- Disabled) Format: Decimal, Source: TI
SRF1 = 07,03,18,10,05,fb,f0,e8, 0,0,0,0,0,0,0f,3f  # Unit: SRF1 values, Format: Signed, Source: TI
SRF2 = 07,03,18,10,05,f6,f0,e8              # Unit: SRF2 values, Format: Signed, Source: TI
SRF3 = 07,03,18,10,05,fb,f0,e8              # Unit: SRF3 values, Format: Signed, Source: TI

################################ FEM dependents parameters #######################################
###################### FEM1 parameters ######################

# (for Single bend 2.4G parameters FEM1 (TQS 2.5) HDK20)

RxTraceInsertionLoss_2_4G = 0x12
# RxTraceInsertionLoss_2_4G = 0
TXTraceLoss_2_4G  = 0x12
# TXTraceLoss_2_4G  = 0
RxRssiAndProcessCompensation_2_4G = ec,f6,00,0c,18,f8,fc,00,08,10,f0,f8,00,0a,14
TXBiPReferencePDvoltage_2_4G = 375  # 0x177
TxBiPReferencePower_2_4G = 128      # 0x80
TxBiPOffsetdB_2_4G = 0
TxPerRatePowerLimits_2_4G_Normal = 1a, 1f, 23, 23, 23, 27
# TxPerRatePowerLimits_2_4G_Normal = 1d, 1f, 22, 26, 28, 29
TxPerRatePowerLimits_2_4G_Degraded = 1a, 1f, 22, 24, 26, 26
# TxPerRatePowerLimits_2_4G_Degraded = 1a, 1f, 22, 24, 26, 28
TxPerRatePowerLimits_2_4G_Extreme = 16, 1d, 1e, 20, 24, 23 # Unit: 1/2dB, Format: Signed, Source: Customer
# TxPerRatePowerLimits_2_4G_Extreme = 16, 1d, 1e, 20, 24, 25 # Unit: 1/2dB, Format: Signed, Source: Customer
DegradedLowToNormalThr_2_4G = 30 # 0x1e Unit: 1/10 volts, Format: Unsigned, Source: TI
NormalToDegradedHighThr_2_4G = 45 # 0x2d Unit: 1/10 volts, Format: Unsigned, Source: TI
TxPerChannelPowerLimits_2_4G_11b = 50,50,50,50,50,50,50,50,50,50,50,50,50,50
TxPerChannelPowerLimits_2_4G_OFDM = 50,50,50,50,50,50,50,50,50,50,50,50,50,50
TxPDVsRateOffsets_2_4G = 01,02,02,02,02,00
# for Triquent 2.5 should use this, but needs factory OTP support, for now use the same as Triquent 2.6
#TxIbiasTable_2_4G = 11,11,15,11,15,0f
TxIbiasTable_2_4G = 15,15,15,11,15,15
RxFemInsertionLoss_2_4G  = 14  # 0x0e
EOF
			chown 0.0 /system/etc/wifi/tiwlan.ini
			chmod 644 /system/etc/wifi/tiwlan.ini
			echo "Done!"
			echo "Returning to Fixer Menu"
			sleep 3
		}
	}
	#-- Loading --#
	case $1 in
		-M)
			if [ $2 = "--FAST" ]; then
				Set_Ings
				Functions
				SuCheck
				Variables
				Menus
				2=" "; 1=" "
			else
				Loading () {
						echo "\t\tLOADING"
						echo "\[$1\]"
						echo "$2"
						sleep 1
					}
				Loading ">=========" "settings"
				Set_Ings
				Loading ">>>=======" "functions"
				Functions
				Loading ">>>>======" "superuser"
				SuCheck
				Loading ">>>>>=====" "variables"
				Variables
				Loading ">>>>>>>===" "scripts"
				Scripts
				Loading ">>>>>>>>>=" "menus"
				Menus
				Loading ">>>>>>>>>>" "DONE"
				1=" "
			fi
		;;
		*)
			Set_Ings
			Functions
			Variables
			Scripts
		;;
	esac
	#-- Boot & Calls
	if [ -n $@ ]; then
		case $1 in
			-b) Bo_Ot;;
			-v) Version_Info;;
			-s) Smooth_Script;;
			-c*) Cleaner_Script $2 $3 $4 $5 $6;;
			-f*) Fstrim_Script $2 $3 $4 $5;;
			-o*) Optimizer_Script $2 $3 $4;;
			-k*) Killer_Script $2;;
			-t) Tweak_Script;;
			-r*) Ram_Script $2;;
			*)
				echo "Wrong argument format"
				echo "Use: -argument \[--options\]"
			;;
		esac
		exitm exit
	fi
	until [ $ret -eq 2 ]; do Main_Menu; done
	exitm exit
}
TheThing
